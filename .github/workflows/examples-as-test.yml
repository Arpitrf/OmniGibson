name: Examples as Tests

on: 
  pull_request: 
  push: 
    branches: 
      - og-develop
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  generate_example_tests:
    name: Generate Example Tests
    runs-on: [self-hosted, linux, gpu, dataset-enabled]
    defaults:
      run:
        shell: micromamba run -n omnigibson /bin/bash -leo pipefail {0}
    steps:
      - name: Fix home
        run: echo "HOME=/root" >> $GITHUB_ENV

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: true
          path: omnigibson-src
      
      - name: Install dev requirements
        working-directory: omnigibson-src
        run: pip install -r requirements-dev.txt
        
      - name: Install
        working-directory: omnigibson-src
        run: pip install -e .

      - name: Generate example tests
        working-directory: omnigibson-src
        run: python tests/create_tests_of_examples.py

      - name: Get list of generated tests
        id: get-test-list
        run: |
          echo "example_tests=$(ls omnigibson-src/tests/tests_of_examples/*_test.py | xargs -n 1 basename | sed 's/.py$//' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

    outputs:
      example_tests: ${{ steps.get-test-list.outputs.example_tests }}
  
  run_test:
    name: Run Tests
    needs: [generate_example_tests]
    runs-on: [self-hosted, linux, gpu, dataset-enabled]

    strategy:
      matrix:
        test_file:
          - ${{ needs.generate_example_tests.outputs.example_tests != '' && fromJson(needs.generate_example_tests.outputs.example_tests) || '[]' }}

    defaults:
      run:
        shell: micromamba run -n omnigibson /bin/bash -leo pipefail {0}

    steps:
      - name: Fix home
        run: echo "HOME=/root" >> $GITHUB_ENV

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: true
          path: omnigibson-src

      - name: Install dev requirements
        working-directory: omnigibson-src
        run: pip install -r requirements-dev.txt

      - name: Install
        working-directory: omnigibson-src
        run: pip install -e .

      - name: Run tests
        working-directory: omnigibson-src
        run: |
          if [[ "${{ matrix.test_file }}" == *"_test" ]]; then
            pytest -s tests/tests_of_examples/${{ matrix.test_file }}.py --junitxml=${{ matrix.test_file }}.xml
          else
            pytest -s tests/${{ matrix.test_file }}.py --junitxml=${{ matrix.test_file }}.xml
          fi
          cp ${{ matrix.test_file }}.xml ${GITHUB_WORKSPACE}/

      - name: Deploy artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-tests-${{ matrix.test_file }}
          path: ${{ matrix.test_file }}.xml

  upload_report:
    name: Compile Report
    runs-on: [self-hosted, linux]
    defaults:
      run:
        shell: micromamba run -n omnigibson /bin/bash -leo pipefail {0}
    needs: [run_test]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: true
          path: omnigibson-src
      - name: Pull reports
        uses: actions/download-artifact@v3
        with:
          path: omnigibson-src
      - name: Test Report0
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          working-directory: omnigibson-src
          path: ${{ github.run_id }}-tests-*/test_*.xml
          reporter: java-junit
          fail-on-error: 'true'
          fail-on-empty: 'true'

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v2.1.0
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}

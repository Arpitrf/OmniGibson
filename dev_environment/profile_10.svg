<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="410" onload="init(evt)" viewBox="0 0 1200 410" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="410" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg --pid 45896</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="399.00"> </text><svg id="frames" x="10" width="1180" total_samples="1783"><g><title>step (omnigibson/envs/vec_env_base.py:14) (2 samples, 0.11%)</title><rect x="0.0561%" y="100" width="0.1122%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.3061%" y="110.50"></text></g><g><title>_pre_step (omnigibson/envs/env_base.py:538) (2 samples, 0.11%)</title><rect x="0.0561%" y="116" width="0.1122%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.3061%" y="126.50"></text></g><g><title>_step (core/physics_context/physics_context.py:573) (5 samples, 0.28%)</title><rect x="0.2243%" y="148" width="0.2804%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="5"/><text x="0.4743%" y="158.50"></text></g><g><title>get_joint_positions (core/articulations/articulation_view.py:1447) (2 samples, 0.11%)</title><rect x="68.9849%" y="212" width="0.1122%" height="15" fill="rgb(248,212,6)" fg:x="1230" fg:w="2"/><text x="69.2349%" y="222.50"></text></g><g><title>get_dof_positions (tensors/impl/api.py:426) (2 samples, 0.11%)</title><rect x="68.9849%" y="228" width="0.1122%" height="15" fill="rgb(208,68,35)" fg:x="1230" fg:w="2"/><text x="69.2349%" y="238.50"></text></g><g><title>get_joint_positions (omnigibson/prims/entity_prim.py:832) (7 samples, 0.39%)</title><rect x="68.8727%" y="196" width="0.3926%" height="15" fill="rgb(232,128,0)" fg:x="1228" fg:w="7"/><text x="69.1227%" y="206.50"></text></g><g><title>get_joint_positions (core/articulations/articulation_view.py:1449) (3 samples, 0.17%)</title><rect x="69.0970%" y="212" width="0.1683%" height="15" fill="rgb(207,160,47)" fg:x="1232" fg:w="3"/><text x="69.3470%" y="222.50"></text></g><g><title>clone_tensor (core/utils/numpy/tensor.py:43) (3 samples, 0.17%)</title><rect x="69.0970%" y="228" width="0.1683%" height="15" fill="rgb(228,23,34)" fg:x="1232" fg:w="3"/><text x="69.3470%" y="238.50"></text></g><g><title>set_joint_positions (omnigibson/utils/deprecated_utils.py:481) (3 samples, 0.17%)</title><rect x="69.2653%" y="212" width="0.1683%" height="15" fill="rgb(218,30,26)" fg:x="1235" fg:w="3"/><text x="69.5153%" y="222.50"></text></g><g><title>set_dof_positions (tensors/impl/api.py:446) (2 samples, 0.11%)</title><rect x="69.3214%" y="228" width="0.1122%" height="15" fill="rgb(220,122,19)" fg:x="1236" fg:w="2"/><text x="69.5714%" y="238.50"></text></g><g><title>step (omnigibson/robots/robot_base.py:280) (13 samples, 0.73%)</title><rect x="68.7605%" y="180" width="0.7291%" height="15" fill="rgb(250,228,42)" fg:x="1226" fg:w="13"/><text x="69.0105%" y="190.50"></text></g><g><title>set_joint_positions (omnigibson/prims/entity_prim.py:636) (4 samples, 0.22%)</title><rect x="69.2653%" y="196" width="0.2243%" height="15" fill="rgb(240,193,28)" fg:x="1235" fg:w="4"/><text x="69.5153%" y="206.50"></text></g><g><title>get_joint_velocities (omnigibson/prims/entity_prim.py:850) (2 samples, 0.11%)</title><rect x="69.4896%" y="196" width="0.1122%" height="15" fill="rgb(216,20,37)" fg:x="1239" fg:w="2"/><text x="69.7396%" y="206.50"></text></g><g><title>step (omnigibson/robots/robot_base.py:281) (9 samples, 0.50%)</title><rect x="69.4896%" y="180" width="0.5048%" height="15" fill="rgb(206,188,39)" fg:x="1239" fg:w="9"/><text x="69.7396%" y="190.50"></text></g><g><title>set_joint_velocities (omnigibson/prims/entity_prim.py:667) (7 samples, 0.39%)</title><rect x="69.6018%" y="196" width="0.3926%" height="15" fill="rgb(217,207,13)" fg:x="1241" fg:w="7"/><text x="69.8518%" y="206.50"></text></g><g><title>set_joint_velocities (omnigibson/utils/deprecated_utils.py:551) (5 samples, 0.28%)</title><rect x="69.7140%" y="212" width="0.2804%" height="15" fill="rgb(231,73,38)" fg:x="1243" fg:w="5"/><text x="69.9640%" y="222.50"></text></g><g><title>set_joint_velocity_targets (core/articulations/articulation_view.py:1033) (2 samples, 0.11%)</title><rect x="69.8822%" y="228" width="0.1122%" height="15" fill="rgb(225,20,46)" fg:x="1246" fg:w="2"/><text x="70.1322%" y="238.50"></text></g><g><title>set_dof_velocity_targets (tensors/impl/api.py:482) (2 samples, 0.11%)</title><rect x="69.8822%" y="244" width="0.1122%" height="15" fill="rgb(210,31,41)" fg:x="1246" fg:w="2"/><text x="70.1322%" y="254.50"></text></g><g><title>get_world_poses (core/articulations/articulation_view.py:1802) (2 samples, 0.11%)</title><rect x="69.9944%" y="212" width="0.1122%" height="15" fill="rgb(221,200,47)" fg:x="1248" fg:w="2"/><text x="70.2444%" y="222.50"></text></g><g><title>get_position_orientation (omnigibson/prims/entity_prim.py:950) (7 samples, 0.39%)</title><rect x="69.9944%" y="196" width="0.3926%" height="15" fill="rgb(226,26,5)" fg:x="1248" fg:w="7"/><text x="70.2444%" y="206.50"></text></g><g><title>get_world_poses (core/articulations/articulation_view.py:1803) (5 samples, 0.28%)</title><rect x="70.1066%" y="212" width="0.2804%" height="15" fill="rgb(249,33,26)" fg:x="1250" fg:w="5"/><text x="70.3566%" y="222.50"></text></g><g><title>xyzw2wxyz (core/utils/numpy/rotations.py:191) (4 samples, 0.22%)</title><rect x="70.1626%" y="228" width="0.2243%" height="15" fill="rgb(235,183,28)" fg:x="1251" fg:w="4"/><text x="70.4126%" y="238.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (4 samples, 0.22%)</title><rect x="70.1626%" y="244" width="0.2243%" height="15" fill="rgb(221,5,38)" fg:x="1251" fg:w="4"/><text x="70.4126%" y="254.50"></text></g><g><title>get_position_orientation (omnigibson/prims/entity_prim.py:951) (2 samples, 0.11%)</title><rect x="70.3870%" y="196" width="0.1122%" height="15" fill="rgb(247,18,42)" fg:x="1255" fg:w="2"/><text x="70.6370%" y="206.50"></text></g><g><title>kinematic_only (omnigibson/prims/rigid_prim.py:498) (4 samples, 0.22%)</title><rect x="70.4992%" y="228" width="0.2243%" height="15" fill="rgb(241,131,45)" fg:x="1257" fg:w="4"/><text x="70.7492%" y="238.50"></text></g><g><title>get_attribute (omnigibson/prims/prim_base.py:222) (4 samples, 0.22%)</title><rect x="70.4992%" y="244" width="0.2243%" height="15" fill="rgb(249,31,29)" fg:x="1257" fg:w="4"/><text x="70.7492%" y="254.50"></text></g><g><title>set_position_orientation (omnigibson/prims/entity_prim.py:924) (5 samples, 0.28%)</title><rect x="70.4992%" y="196" width="0.2804%" height="15" fill="rgb(225,111,53)" fg:x="1257" fg:w="5"/><text x="70.7492%" y="206.50"></text></g><g><title>kinematic_only (omnigibson/prims/entity_prim.py:1249) (5 samples, 0.28%)</title><rect x="70.4992%" y="212" width="0.2804%" height="15" fill="rgb(238,160,17)" fg:x="1257" fg:w="5"/><text x="70.7492%" y="222.50"></text></g><g><title>roll (numpy/core/numeric.py:1228) (3 samples, 0.17%)</title><rect x="71.0600%" y="276" width="0.1683%" height="15" fill="rgb(214,148,48)" fg:x="1267" fg:w="3"/><text x="71.3100%" y="286.50"></text></g><g><title>set_world_poses (core/articulations/articulation_view.py:1728) (9 samples, 0.50%)</title><rect x="70.8357%" y="212" width="0.5048%" height="15" fill="rgb(232,36,49)" fg:x="1263" fg:w="9"/><text x="71.0857%" y="222.50"></text></g><g><title>get_world_poses (core/articulations/articulation_view.py:1803) (6 samples, 0.34%)</title><rect x="71.0039%" y="228" width="0.3365%" height="15" fill="rgb(209,103,24)" fg:x="1266" fg:w="6"/><text x="71.2539%" y="238.50"></text></g><g><title>xyzw2wxyz (core/utils/numpy/rotations.py:191) (6 samples, 0.34%)</title><rect x="71.0039%" y="244" width="0.3365%" height="15" fill="rgb(229,88,8)" fg:x="1266" fg:w="6"/><text x="71.2539%" y="254.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (5 samples, 0.28%)</title><rect x="71.0600%" y="260" width="0.2804%" height="15" fill="rgb(213,181,19)" fg:x="1267" fg:w="5"/><text x="71.3100%" y="270.50"></text></g><g><title>assign_pose (core/utils/numpy/transformations.py:74) (4 samples, 0.22%)</title><rect x="71.3404%" y="228" width="0.2243%" height="15" fill="rgb(254,191,54)" fg:x="1272" fg:w="4"/><text x="71.5904%" y="238.50"></text></g><g><title>wxyz2xyzw (core/utils/numpy/rotations.py:195) (4 samples, 0.22%)</title><rect x="71.3404%" y="244" width="0.2243%" height="15" fill="rgb(241,83,37)" fg:x="1272" fg:w="4"/><text x="71.5904%" y="254.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (4 samples, 0.22%)</title><rect x="71.3404%" y="260" width="0.2243%" height="15" fill="rgb(233,36,39)" fg:x="1272" fg:w="4"/><text x="71.5904%" y="270.50"></text></g><g><title>set_world_poses (core/articulations/articulation_view.py:1737) (5 samples, 0.28%)</title><rect x="71.3404%" y="212" width="0.2804%" height="15" fill="rgb(226,3,54)" fg:x="1272" fg:w="5"/><text x="71.5904%" y="222.50"></text></g><g><title>step (omnigibson/robots/robot_base.py:282) (31 samples, 1.74%)</title><rect x="69.9944%" y="180" width="1.7386%" height="15" fill="rgb(245,192,40)" fg:x="1248" fg:w="31"/><text x="70.2444%" y="190.50"></text></g><g><title>set_position_orientation (omnigibson/prims/entity_prim.py:938) (16 samples, 0.90%)</title><rect x="70.8357%" y="196" width="0.8974%" height="15" fill="rgb(238,167,29)" fg:x="1263" fg:w="16"/><text x="71.0857%" y="206.50"></text></g><g><title>set_world_poses (core/articulations/articulation_view.py:1740) (2 samples, 0.11%)</title><rect x="71.6209%" y="212" width="0.1122%" height="15" fill="rgb(232,182,51)" fg:x="1277" fg:w="2"/><text x="71.8709%" y="222.50"></text></g><g><title>_add_arm_control_dict (omnigibson/robots/manipulation_robot.py:402) (2 samples, 0.11%)</title><rect x="71.9013%" y="228" width="0.1122%" height="15" fill="rgb(231,60,39)" fg:x="1282" fg:w="2"/><text x="72.1513%" y="238.50"></text></g><g><title>eef_links (omnigibson/robots/manipulation_robot.py:604) (2 samples, 0.11%)</title><rect x="71.9013%" y="244" width="0.1122%" height="15" fill="rgb(208,69,12)" fg:x="1282" fg:w="2"/><text x="72.1513%" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (omnigibson/robots/manipulation_robot.py:604) (2 samples, 0.11%)</title><rect x="71.9013%" y="260" width="0.1122%" height="15" fill="rgb(235,93,37)" fg:x="1282" fg:w="2"/><text x="72.1513%" y="270.50"></text></g><g><title>step (omnigibson/objects/controllable_object.py:332) (5 samples, 0.28%)</title><rect x="71.7891%" y="196" width="0.2804%" height="15" fill="rgb(213,116,39)" fg:x="1280" fg:w="5"/><text x="72.0391%" y="206.50"></text></g><g><title>get_control_dict (omnigibson/robots/manipulation_robot.py:381) (4 samples, 0.22%)</title><rect x="71.8452%" y="212" width="0.2243%" height="15" fill="rgb(222,207,29)" fg:x="1281" fg:w="4"/><text x="72.0952%" y="222.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:509) (2 samples, 0.11%)</title><rect x="72.1256%" y="276" width="0.1122%" height="15" fill="rgb(206,96,30)" fg:x="1286" fg:w="2"/><text x="72.3756%" y="286.50"></text></g><g><title>get_joint_positions (omnigibson/prims/entity_prim.py:832) (2 samples, 0.11%)</title><rect x="72.1256%" y="292" width="0.1122%" height="15" fill="rgb(218,138,4)" fg:x="1286" fg:w="2"/><text x="72.3756%" y="302.50"></text></g><g><title>__getitem__ (omnigibson/utils/python_utils.py:728) (3 samples, 0.17%)</title><rect x="72.1256%" y="244" width="0.1683%" height="15" fill="rgb(250,191,14)" fg:x="1286" fg:w="3"/><text x="72.3756%" y="254.50"></text></g><g><title>get (omnigibson/utils/python_utils.py:747) (3 samples, 0.17%)</title><rect x="72.1256%" y="260" width="0.1683%" height="15" fill="rgb(239,60,40)" fg:x="1286" fg:w="3"/><text x="72.3756%" y="270.50"></text></g><g><title>compute_control (omnigibson/controllers/joint_controller.py:166) (5 samples, 0.28%)</title><rect x="72.0695%" y="228" width="0.2804%" height="15" fill="rgb(206,27,48)" fg:x="1285" fg:w="5"/><text x="72.3195%" y="238.50"></text></g><g><title>compute_control (omnigibson/controllers/joint_controller.py:183) (4 samples, 0.22%)</title><rect x="72.3500%" y="228" width="0.2243%" height="15" fill="rgb(225,35,8)" fg:x="1290" fg:w="4"/><text x="72.6000%" y="238.50"></text></g><g><title>meshgrid (&lt;__array_function__ internals&gt;:180) (4 samples, 0.22%)</title><rect x="72.3500%" y="244" width="0.2243%" height="15" fill="rgb(250,213,24)" fg:x="1290" fg:w="4"/><text x="72.6000%" y="254.50"></text></g><g><title>meshgrid (numpy/lib/function_base.py:4987) (3 samples, 0.17%)</title><rect x="72.4061%" y="260" width="0.1683%" height="15" fill="rgb(247,123,22)" fg:x="1291" fg:w="3"/><text x="72.6561%" y="270.50"></text></g><g><title>broadcast_arrays (&lt;__array_function__ internals&gt;:180) (3 samples, 0.17%)</title><rect x="72.4061%" y="276" width="0.1683%" height="15" fill="rgb(231,138,38)" fg:x="1291" fg:w="3"/><text x="72.6561%" y="286.50"></text></g><g><title>compute_control (omnigibson/controllers/joint_controller.py:184) (4 samples, 0.22%)</title><rect x="72.5743%" y="228" width="0.2243%" height="15" fill="rgb(231,145,46)" fg:x="1294" fg:w="4"/><text x="72.8243%" y="238.50"></text></g><g><title>__getitem__ (omnigibson/utils/python_utils.py:728) (4 samples, 0.22%)</title><rect x="72.5743%" y="244" width="0.2243%" height="15" fill="rgb(251,118,11)" fg:x="1294" fg:w="4"/><text x="72.8243%" y="254.50"></text></g><g><title>get (omnigibson/utils/python_utils.py:747) (4 samples, 0.22%)</title><rect x="72.5743%" y="260" width="0.2243%" height="15" fill="rgb(217,147,25)" fg:x="1294" fg:w="4"/><text x="72.8243%" y="270.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:512) (3 samples, 0.17%)</title><rect x="72.6304%" y="276" width="0.1683%" height="15" fill="rgb(247,81,37)" fg:x="1295" fg:w="3"/><text x="72.8804%" y="286.50"></text></g><g><title>get_mass_matrix (omnigibson/prims/entity_prim.py:1320) (3 samples, 0.17%)</title><rect x="72.6304%" y="292" width="0.1683%" height="15" fill="rgb(209,12,38)" fg:x="1295" fg:w="3"/><text x="72.8804%" y="302.50"></text></g><g><title>get_mass_matrices (core/articulations/articulation_view.py:3656) (2 samples, 0.11%)</title><rect x="72.6865%" y="308" width="0.1122%" height="15" fill="rgb(227,1,9)" fg:x="1296" fg:w="2"/><text x="72.9365%" y="318.50"></text></g><g><title>get_mass_matrices (tensors/impl/api.py:587) (2 samples, 0.11%)</title><rect x="72.6865%" y="324" width="0.1122%" height="15" fill="rgb(248,47,43)" fg:x="1296" fg:w="2"/><text x="72.9365%" y="334.50"></text></g><g><title>get_generalized_gravity_forces (core/articulations/articulation_view.py:3790) (2 samples, 0.11%)</title><rect x="72.8547%" y="324" width="0.1122%" height="15" fill="rgb(221,10,30)" fg:x="1299" fg:w="2"/><text x="73.1047%" y="334.50"></text></g><g><title>resolve_indices (core/utils/numpy/tensor.py:51) (2 samples, 0.11%)</title><rect x="72.8547%" y="340" width="0.1122%" height="15" fill="rgb(210,229,1)" fg:x="1299" fg:w="2"/><text x="73.1047%" y="350.50"></text></g><g><title>get_generalized_gravity_forces (core/articulations/articulation_view.py:3791) (2 samples, 0.11%)</title><rect x="72.9669%" y="324" width="0.1122%" height="15" fill="rgb(222,148,37)" fg:x="1301" fg:w="2"/><text x="73.2169%" y="334.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:513) (5 samples, 0.28%)</title><rect x="72.8547%" y="276" width="0.2804%" height="15" fill="rgb(234,67,33)" fg:x="1299" fg:w="5"/><text x="73.1047%" y="286.50"></text></g><g><title>get_generalized_gravity_forces (omnigibson/robots/robot_base.py:493) (5 samples, 0.28%)</title><rect x="72.8547%" y="292" width="0.2804%" height="15" fill="rgb(247,98,35)" fg:x="1299" fg:w="5"/><text x="73.1047%" y="302.50"></text></g><g><title>get_generalized_gravity_forces (omnigibson/prims/entity_prim.py:1309) (5 samples, 0.28%)</title><rect x="72.8547%" y="308" width="0.2804%" height="15" fill="rgb(247,138,52)" fg:x="1299" fg:w="5"/><text x="73.1047%" y="318.50"></text></g><g><title>compute_control (omnigibson/controllers/joint_controller.py:188) (8 samples, 0.45%)</title><rect x="72.7987%" y="228" width="0.4487%" height="15" fill="rgb(213,79,30)" fg:x="1298" fg:w="8"/><text x="73.0487%" y="238.50"></text></g><g><title>__getitem__ (omnigibson/utils/python_utils.py:728) (7 samples, 0.39%)</title><rect x="72.8547%" y="244" width="0.3926%" height="15" fill="rgb(246,177,23)" fg:x="1299" fg:w="7"/><text x="73.1047%" y="254.50"></text></g><g><title>get (omnigibson/utils/python_utils.py:747) (7 samples, 0.39%)</title><rect x="72.8547%" y="260" width="0.3926%" height="15" fill="rgb(230,62,27)" fg:x="1299" fg:w="7"/><text x="73.1047%" y="270.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:514) (2 samples, 0.11%)</title><rect x="73.1352%" y="276" width="0.1122%" height="15" fill="rgb(216,154,8)" fg:x="1304" fg:w="2"/><text x="73.3852%" y="286.50"></text></g><g><title>get_coriolis_and_centrifugal_forces (omnigibson/prims/entity_prim.py:1298) (2 samples, 0.11%)</title><rect x="73.1352%" y="292" width="0.1122%" height="15" fill="rgb(244,35,45)" fg:x="1304" fg:w="2"/><text x="73.3852%" y="302.50"></text></g><g><title>_update_grasping_state (omnigibson/controllers/multi_finger_gripper_controller.py:240) (2 samples, 0.11%)</title><rect x="73.3595%" y="244" width="0.1122%" height="15" fill="rgb(251,115,12)" fg:x="1308" fg:w="2"/><text x="73.6095%" y="254.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:180) (2 samples, 0.11%)</title><rect x="73.3595%" y="260" width="0.1122%" height="15" fill="rgb(240,54,50)" fg:x="1308" fg:w="2"/><text x="73.6095%" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3432) (2 samples, 0.11%)</title><rect x="73.3595%" y="276" width="0.1122%" height="15" fill="rgb(233,84,52)" fg:x="1308" fg:w="2"/><text x="73.6095%" y="286.50"></text></g><g><title>_update_grasping_state (omnigibson/controllers/multi_finger_gripper_controller.py:274) (2 samples, 0.11%)</title><rect x="73.5838%" y="244" width="0.1122%" height="15" fill="rgb(207,117,47)" fg:x="1312" fg:w="2"/><text x="73.8338%" y="254.50"></text></g><g><title>step (omnigibson/controllers/controller_base.py:274) (30 samples, 1.68%)</title><rect x="72.0695%" y="212" width="1.6826%" height="15" fill="rgb(249,43,39)" fg:x="1285" fg:w="30"/><text x="72.3195%" y="222.50"></text></g><g><title>compute_control (omnigibson/controllers/multi_finger_gripper_controller.py:203) (8 samples, 0.45%)</title><rect x="73.3034%" y="228" width="0.4487%" height="15" fill="rgb(209,38,44)" fg:x="1307" fg:w="8"/><text x="73.5534%" y="238.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:94) (2 samples, 0.11%)</title><rect x="73.7521%" y="260" width="0.1122%" height="15" fill="rgb(236,212,23)" fg:x="1315" fg:w="2"/><text x="74.0021%" y="270.50"></text></g><g><title>_clip (numpy/core/_methods.py:135) (5 samples, 0.28%)</title><rect x="73.7521%" y="244" width="0.2804%" height="15" fill="rgb(242,79,21)" fg:x="1315" fg:w="5"/><text x="74.0021%" y="254.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:95) (3 samples, 0.17%)</title><rect x="73.8643%" y="260" width="0.1683%" height="15" fill="rgb(211,96,35)" fg:x="1317" fg:w="3"/><text x="74.1143%" y="270.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:180) (2 samples, 0.11%)</title><rect x="73.9204%" y="276" width="0.1122%" height="15" fill="rgb(253,215,40)" fg:x="1318" fg:w="2"/><text x="74.1704%" y="286.50"></text></g><g><title>clip_control (omnigibson/controllers/controller_base.py:246) (6 samples, 0.34%)</title><rect x="73.7521%" y="228" width="0.3365%" height="15" fill="rgb(211,81,21)" fg:x="1315" fg:w="6"/><text x="74.0021%" y="238.50"></text></g><g><title>clip_control (omnigibson/controllers/controller_base.py:248) (2 samples, 0.11%)</title><rect x="74.0886%" y="228" width="0.1122%" height="15" fill="rgb(208,190,38)" fg:x="1321" fg:w="2"/><text x="74.3386%" y="238.50"></text></g><g><title>step (omnigibson/objects/controllable_object.py:336) (41 samples, 2.30%)</title><rect x="72.0695%" y="196" width="2.2995%" height="15" fill="rgb(235,213,38)" fg:x="1285" fg:w="41"/><text x="72.3195%" y="206.50">s..</text></g><g><title>step (omnigibson/controllers/controller_base.py:275) (11 samples, 0.62%)</title><rect x="73.7521%" y="212" width="0.6169%" height="15" fill="rgb(237,122,38)" fg:x="1315" fg:w="11"/><text x="74.0021%" y="222.50"></text></g><g><title>clip_control (omnigibson/controllers/controller_base.py:255) (2 samples, 0.11%)</title><rect x="74.2569%" y="228" width="0.1122%" height="15" fill="rgb(244,218,35)" fg:x="1324" fg:w="2"/><text x="74.5069%" y="238.50"></text></g><g><title>step (omnigibson/objects/controllable_object.py:349) (2 samples, 0.11%)</title><rect x="74.4251%" y="196" width="0.1122%" height="15" fill="rgb(240,68,47)" fg:x="1327" fg:w="2"/><text x="74.6751%" y="206.50"></text></g><g><title>set_dof_position_targets (tensors/impl/api.py:472) (3 samples, 0.17%)</title><rect x="74.7616%" y="292" width="0.1683%" height="15" fill="rgb(210,16,53)" fg:x="1333" fg:w="3"/><text x="75.0116%" y="302.50"></text></g><g><title>get_tensor_desc (tensors/impl/frontend_np.py:62) (2 samples, 0.11%)</title><rect x="74.8177%" y="308" width="0.1122%" height="15" fill="rgb(235,124,12)" fg:x="1334" fg:w="2"/><text x="75.0677%" y="318.50"></text></g><g><title>deploy_control (omnigibson/objects/controllable_object.py:477) (6 samples, 0.34%)</title><rect x="74.6495%" y="228" width="0.3365%" height="15" fill="rgb(224,169,11)" fg:x="1331" fg:w="6"/><text x="74.8995%" y="238.50"></text></g><g><title>set_joint_positions (omnigibson/objects/controllable_object.py:526) (6 samples, 0.34%)</title><rect x="74.6495%" y="244" width="0.3365%" height="15" fill="rgb(250,166,2)" fg:x="1331" fg:w="6"/><text x="74.8995%" y="254.50"></text></g><g><title>set_joint_positions (omnigibson/prims/entity_prim.py:634) (5 samples, 0.28%)</title><rect x="74.7056%" y="260" width="0.2804%" height="15" fill="rgb(242,216,29)" fg:x="1332" fg:w="5"/><text x="74.9556%" y="270.50"></text></g><g><title>set_joint_position_targets (core/articulations/articulation_view.py:908) (4 samples, 0.22%)</title><rect x="74.7616%" y="276" width="0.2243%" height="15" fill="rgb(230,116,27)" fg:x="1333" fg:w="4"/><text x="75.0116%" y="286.50"></text></g><g><title>deploy_control (omnigibson/objects/controllable_object.py:479) (3 samples, 0.17%)</title><rect x="74.9860%" y="228" width="0.1683%" height="15" fill="rgb(228,99,48)" fg:x="1337" fg:w="3"/><text x="75.2360%" y="238.50"></text></g><g><title>set_joint_velocities (omnigibson/prims/entity_prim.py:665) (3 samples, 0.17%)</title><rect x="74.9860%" y="244" width="0.1683%" height="15" fill="rgb(253,11,6)" fg:x="1337" fg:w="3"/><text x="75.2360%" y="254.50"></text></g><g><title>deploy_control (omnigibson/robots/manipulation_robot.py:333) (14 samples, 0.79%)</title><rect x="74.5373%" y="212" width="0.7852%" height="15" fill="rgb(247,143,39)" fg:x="1329" fg:w="14"/><text x="74.7873%" y="222.50"></text></g><g><title>deploy_control (omnigibson/objects/controllable_object.py:481) (3 samples, 0.17%)</title><rect x="75.1542%" y="228" width="0.1683%" height="15" fill="rgb(236,97,10)" fg:x="1340" fg:w="3"/><text x="75.4042%" y="238.50"></text></g><g><title>set_joint_efforts (omnigibson/prims/entity_prim.py:691) (3 samples, 0.17%)</title><rect x="75.1542%" y="244" width="0.1683%" height="15" fill="rgb(233,208,19)" fg:x="1340" fg:w="3"/><text x="75.4042%" y="254.50"></text></g><g><title>_handle_assisted_grasping (omnigibson/robots/manipulation_robot.py:1238) (3 samples, 0.17%)</title><rect x="75.3786%" y="228" width="0.1683%" height="15" fill="rgb(216,164,2)" fg:x="1344" fg:w="3"/><text x="75.6286%" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:180) (3 samples, 0.17%)</title><rect x="75.3786%" y="244" width="0.1683%" height="15" fill="rgb(220,129,5)" fg:x="1344" fg:w="3"/><text x="75.6286%" y="254.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3432) (3 samples, 0.17%)</title><rect x="75.3786%" y="260" width="0.1683%" height="15" fill="rgb(242,17,10)" fg:x="1344" fg:w="3"/><text x="75.6286%" y="270.50"></text></g><g><title>contact_list (omnigibson/prims/rigid_prim.py:254) (2 samples, 0.11%)</title><rect x="75.5468%" y="308" width="0.1122%" height="15" fill="rgb(242,107,0)" fg:x="1347" fg:w="2"/><text x="75.7968%" y="318.50"></text></g><g><title>contact_reporting_enabled (omnigibson/prims/rigid_prim.py:604) (2 samples, 0.11%)</title><rect x="75.5468%" y="324" width="0.1122%" height="15" fill="rgb(251,28,31)" fg:x="1347" fg:w="2"/><text x="75.7968%" y="334.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py:721) (2 samples, 0.11%)</title><rect x="76.1638%" y="372" width="0.1122%" height="15" fill="rgb(233,223,10)" fg:x="1358" fg:w="2"/><text x="76.4138%" y="382.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py:706) (4 samples, 0.22%)</title><rect x="76.1077%" y="356" width="0.2243%" height="15" fill="rgb(215,21,27)" fg:x="1357" fg:w="4"/><text x="76.3577%" y="366.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py:765) (2 samples, 0.11%)</title><rect x="76.3320%" y="356" width="0.1122%" height="15" fill="rgb(232,23,21)" fg:x="1361" fg:w="2"/><text x="76.5820%" y="366.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py:706) (8 samples, 0.45%)</title><rect x="76.1077%" y="340" width="0.4487%" height="15" fill="rgb(244,5,23)" fg:x="1357" fg:w="8"/><text x="76.3577%" y="350.50"></text></g><g><title>_find_gripper_contacts (omnigibson/robots/manipulation_robot.py:285) (19 samples, 1.07%)</title><rect x="75.5468%" y="276" width="1.0656%" height="15" fill="rgb(226,81,46)" fg:x="1347" fg:w="19"/><text x="75.7968%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/robots/manipulation_robot.py:285) (19 samples, 1.07%)</title><rect x="75.5468%" y="292" width="1.0656%" height="15" fill="rgb(247,70,30)" fg:x="1347" fg:w="19"/><text x="75.7968%" y="302.50"></text></g><g><title>contact_list (omnigibson/prims/rigid_prim.py:255) (17 samples, 0.95%)</title><rect x="75.6590%" y="308" width="0.9534%" height="15" fill="rgb(212,68,19)" fg:x="1349" fg:w="17"/><text x="75.9090%" y="318.50"></text></g><g><title>_dtype_from_pep3118 (numpy/core/_internal.py:652) (11 samples, 0.62%)</title><rect x="75.9955%" y="324" width="0.6169%" height="15" fill="rgb(240,187,13)" fg:x="1355" fg:w="11"/><text x="76.2455%" y="334.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:139) (141 samples, 7.91%)</title><rect x="68.7605%" y="164" width="7.9080%" height="15" fill="rgb(223,113,26)" fg:x="1226" fg:w="141"/><text x="69.0105%" y="174.50">&lt;lambda&gt; (o..</text></g><g><title>step (omnigibson/robots/robot_base.py:284) (88 samples, 4.94%)</title><rect x="71.7330%" y="180" width="4.9355%" height="15" fill="rgb(206,192,2)" fg:x="1279" fg:w="88"/><text x="71.9830%" y="190.50">step (..</text></g><g><title>step (omnigibson/objects/controllable_object.py:354) (38 samples, 2.13%)</title><rect x="74.5373%" y="196" width="2.1312%" height="15" fill="rgb(241,108,4)" fg:x="1329" fg:w="38"/><text x="74.7873%" y="206.50">s..</text></g><g><title>deploy_control (omnigibson/robots/manipulation_robot.py:337) (24 samples, 1.35%)</title><rect x="75.3225%" y="212" width="1.3460%" height="15" fill="rgb(247,173,49)" fg:x="1343" fg:w="24"/><text x="75.5725%" y="222.50"></text></g><g><title>_handle_assisted_grasping (omnigibson/robots/manipulation_robot.py:1256) (20 samples, 1.12%)</title><rect x="75.5468%" y="228" width="1.1217%" height="15" fill="rgb(224,114,35)" fg:x="1347" fg:w="20"/><text x="75.7968%" y="238.50"></text></g><g><title>_calculate_in_hand_object (omnigibson/robots/manipulation_robot.py:1279) (20 samples, 1.12%)</title><rect x="75.5468%" y="244" width="1.1217%" height="15" fill="rgb(245,159,27)" fg:x="1347" fg:w="20"/><text x="75.7968%" y="254.50"></text></g><g><title>_calculate_in_hand_object_rigid (omnigibson/robots/manipulation_robot.py:788) (20 samples, 1.12%)</title><rect x="75.5468%" y="260" width="1.1217%" height="15" fill="rgb(245,172,44)" fg:x="1347" fg:w="20"/><text x="75.7968%" y="270.50"></text></g><g><title>stage_changed_notice (viewport/widget.py:250) (104 samples, 5.83%)</title><rect x="76.7807%" y="180" width="5.8329%" height="15" fill="rgb(236,23,11)" fg:x="1369" fg:w="104"/><text x="77.0307%" y="190.50">stage_c..</text></g><g><title>stage_changed_notice (viewport/widget.py:251) (43 samples, 2.41%)</title><rect x="82.6136%" y="180" width="2.4117%" height="15" fill="rgb(205,117,38)" fg:x="1473" fg:w="43"/><text x="82.8636%" y="190.50">st..</text></g><g><title>stage_changed_notice (viewport/widget.py:256) (39 samples, 2.19%)</title><rect x="85.0252%" y="180" width="2.1873%" height="15" fill="rgb(237,72,25)" fg:x="1516" fg:w="39"/><text x="85.2752%" y="190.50">s..</text></g><g><title>stage_changed_notice (viewport/widget.py:258) (21 samples, 1.18%)</title><rect x="87.2126%" y="180" width="1.1778%" height="15" fill="rgb(244,70,9)" fg:x="1555" fg:w="21"/><text x="87.4626%" y="190.50"></text></g><g><title>stage_changed_notice (viewport/widget.py:260) (119 samples, 6.67%)</title><rect x="88.3904%" y="180" width="6.6741%" height="15" fill="rgb(217,125,39)" fg:x="1576" fg:w="119"/><text x="88.6404%" y="190.50">stage_cha..</text></g><g><title>__ensure_usd_stage (viewport/widget.py:214) (2 samples, 0.11%)</title><rect x="95.1767%" y="196" width="0.1122%" height="15" fill="rgb(235,36,10)" fg:x="1697" fg:w="2"/><text x="95.4267%" y="206.50"></text></g><g><title>stage_changed_notice (viewport/widget.py:263) (7 samples, 0.39%)</title><rect x="95.0645%" y="180" width="0.3926%" height="15" fill="rgb(251,123,47)" fg:x="1695" fg:w="7"/><text x="95.3145%" y="190.50"></text></g><g><title>__viewport_updated (window/layers.py:158) (3 samples, 0.17%)</title><rect x="95.2888%" y="196" width="0.1683%" height="15" fill="rgb(221,13,13)" fg:x="1699" fg:w="3"/><text x="95.5388%" y="206.50"></text></g><g><title>&lt;lambda&gt; (viewport/widget.py:356) (342 samples, 19.18%)</title><rect x="76.6685%" y="164" width="19.1812%" height="15" fill="rgb(238,131,9)" fg:x="1367" fg:w="342"/><text x="76.9185%" y="174.50">&lt;lambda&gt; (viewport/widget.py:3..</text></g><g><title>stage_changed_notice (viewport/widget.py:264) (7 samples, 0.39%)</title><rect x="95.4571%" y="180" width="0.3926%" height="15" fill="rgb(211,50,8)" fg:x="1702" fg:w="7"/><text x="95.7071%" y="190.50"></text></g><g><title>invoke (Trace/__init__.py:76) (3 samples, 0.17%)</title><rect x="95.8497%" y="164" width="0.1683%" height="15" fill="rgb(245,182,24)" fg:x="1709" fg:w="3"/><text x="96.0997%" y="174.50"></text></g><g><title>__on_objects_changed (stage/stage_model.py:473) (4 samples, 0.22%)</title><rect x="96.0179%" y="180" width="0.2243%" height="15" fill="rgb(242,14,37)" fg:x="1712" fg:w="4"/><text x="96.2679%" y="190.50"></text></g><g><title>__on_objects_changed (stage/stage_model.py:475) (3 samples, 0.17%)</title><rect x="96.2984%" y="180" width="0.1683%" height="15" fill="rgb(246,228,12)" fg:x="1717" fg:w="3"/><text x="96.5484%" y="190.50"></text></g><g><title>_on_usd_changed (core/utils/usd_watch.py:147) (3 samples, 0.17%)</title><rect x="96.4666%" y="180" width="0.1683%" height="15" fill="rgb(213,55,15)" fg:x="1720" fg:w="3"/><text x="96.7166%" y="190.50"></text></g><g><title>_on_usd_changed (core/utils/usd_watch.py:148) (6 samples, 0.34%)</title><rect x="96.6349%" y="180" width="0.3365%" height="15" fill="rgb(209,9,3)" fg:x="1723" fg:w="6"/><text x="96.8849%" y="190.50"></text></g><g><title>_on_usd_changed (usd/_impl/utils.py:1068) (4 samples, 0.22%)</title><rect x="97.0275%" y="180" width="0.2243%" height="15" fill="rgb(230,59,30)" fg:x="1730" fg:w="4"/><text x="97.2775%" y="190.50"></text></g><g><title>step (omnigibson/simulator.py:773) (1,749 samples, 98.09%)</title><rect x="0.2243%" y="116" width="98.0931%" height="15" fill="rgb(209,121,21)" fg:x="4" fg:w="1749"/><text x="0.4743%" y="126.50">step (omnigibson/simulator.py:773)</text></g><g><title>step (core/simulation_context/simulation_context.py:704) (1,749 samples, 98.09%)</title><rect x="0.2243%" y="132" width="98.0931%" height="15" fill="rgb(220,109,13)" fg:x="4" fg:w="1749"/><text x="0.4743%" y="142.50">step (core/simulation_context/simulation_context.py:704)</text></g><g><title>_step (core/physics_context/physics_context.py:574) (1,744 samples, 97.81%)</title><rect x="0.5048%" y="148" width="97.8127%" height="15" fill="rgb(232,18,1)" fg:x="9" fg:w="1744"/><text x="0.7548%" y="158.50">_step (core/physics_context/physics_context.py:574)</text></g><g><title>invoke (Trace/__init__.py:77) (41 samples, 2.30%)</title><rect x="96.0179%" y="164" width="2.2995%" height="15" fill="rgb(215,41,42)" fg:x="1712" fg:w="41"/><text x="96.2679%" y="174.50">i..</text></g><g><title>_on_usd_changed (usd/_impl/utils.py:1069) (19 samples, 1.07%)</title><rect x="97.2518%" y="180" width="1.0656%" height="15" fill="rgb(224,123,36)" fg:x="1734" fg:w="19"/><text x="97.5018%" y="190.50"></text></g><g><title>_non_physics_step (omnigibson/simulator.py:656) (3 samples, 0.17%)</title><rect x="98.3735%" y="132" width="0.1683%" height="15" fill="rgb(240,125,3)" fg:x="1754" fg:w="3"/><text x="98.6235%" y="142.50"></text></g><g><title>global_update (omnigibson/object_states/toggle.py:63) (2 samples, 0.11%)</title><rect x="98.4296%" y="148" width="0.1122%" height="15" fill="rgb(205,98,50)" fg:x="1755" fg:w="2"/><text x="98.6796%" y="158.50"></text></g><g><title>step (omnigibson/envs/vec_env_base.py:16) (1,756 samples, 98.49%)</title><rect x="0.1683%" y="100" width="98.4857%" height="15" fill="rgb(205,185,37)" fg:x="3" fg:w="1756"/><text x="0.4183%" y="110.50">step (omnigibson/envs/vec_env_base.py:16)</text></g><g><title>step (omnigibson/simulator.py:776) (6 samples, 0.34%)</title><rect x="98.3174%" y="116" width="0.3365%" height="15" fill="rgb(238,207,15)" fg:x="1753" fg:w="6"/><text x="98.5674%" y="126.50"></text></g><g><title>_non_physics_step (omnigibson/simulator.py:670) (2 samples, 0.11%)</title><rect x="98.5418%" y="132" width="0.1122%" height="15" fill="rgb(213,199,42)" fg:x="1757" fg:w="2"/><text x="98.7918%" y="142.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/locomotion_robot.py:40) (5 samples, 0.28%)</title><rect x="98.6540%" y="228" width="0.2804%" height="15" fill="rgb(235,201,11)" fg:x="1759" fg:w="5"/><text x="98.9040%" y="238.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/active_camera_robot.py:35) (5 samples, 0.28%)</title><rect x="98.6540%" y="244" width="0.2804%" height="15" fill="rgb(207,46,11)" fg:x="1759" fg:w="5"/><text x="98.9040%" y="254.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/two_wheel_robot.py:68) (7 samples, 0.39%)</title><rect x="98.6540%" y="212" width="0.3926%" height="15" fill="rgb(241,35,35)" fg:x="1759" fg:w="7"/><text x="98.9040%" y="222.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/manipulation_robot.py:406) (9 samples, 0.50%)</title><rect x="98.6540%" y="196" width="0.5048%" height="15" fill="rgb(243,32,47)" fg:x="1759" fg:w="9"/><text x="98.9040%" y="206.50"></text></g><g><title>get_relative_eef_pose (omnigibson/robots/manipulation_robot.py:713) (2 samples, 0.11%)</title><rect x="99.2709%" y="228" width="0.1122%" height="15" fill="rgb(247,202,23)" fg:x="1770" fg:w="2"/><text x="99.5209%" y="238.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/manipulation_robot.py:421) (3 samples, 0.17%)</title><rect x="99.2709%" y="196" width="0.1683%" height="15" fill="rgb(219,102,11)" fg:x="1770" fg:w="3"/><text x="99.5209%" y="206.50"></text></g><g><title>get_relative_eef_position (omnigibson/robots/manipulation_robot.py:729) (3 samples, 0.17%)</title><rect x="99.2709%" y="212" width="0.1683%" height="15" fill="rgb(243,110,44)" fg:x="1770" fg:w="3"/><text x="99.5209%" y="222.50"></text></g><g><title>get_relative_eef_pose (omnigibson/robots/manipulation_robot.py:713) (2 samples, 0.11%)</title><rect x="99.4391%" y="228" width="0.1122%" height="15" fill="rgb(222,74,54)" fg:x="1773" fg:w="2"/><text x="99.6891%" y="238.50"></text></g><g><title>get_position_orientation (omnigibson/prims/rigid_prim.py:314) (2 samples, 0.11%)</title><rect x="99.4391%" y="244" width="0.1122%" height="15" fill="rgb(216,99,12)" fg:x="1773" fg:w="2"/><text x="99.6891%" y="254.50"></text></g><g><title>get_world_poses (core/prims/rigid_prim_view.py:423) (2 samples, 0.11%)</title><rect x="99.4391%" y="260" width="0.1122%" height="15" fill="rgb(226,22,26)" fg:x="1773" fg:w="2"/><text x="99.6891%" y="270.50"></text></g><g><title>xyzw2wxyz (core/utils/numpy/rotations.py:191) (2 samples, 0.11%)</title><rect x="99.4391%" y="276" width="0.1122%" height="15" fill="rgb(217,163,10)" fg:x="1773" fg:w="2"/><text x="99.6891%" y="286.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (2 samples, 0.11%)</title><rect x="99.4391%" y="292" width="0.1122%" height="15" fill="rgb(213,25,53)" fg:x="1773" fg:w="2"/><text x="99.6891%" y="302.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/fetch.py:289) (20 samples, 1.12%)</title><rect x="98.6540%" y="180" width="1.1217%" height="15" fill="rgb(252,105,26)" fg:x="1759" fg:w="20"/><text x="98.9040%" y="190.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/manipulation_robot.py:422) (6 samples, 0.34%)</title><rect x="99.4391%" y="196" width="0.3365%" height="15" fill="rgb(220,39,43)" fg:x="1773" fg:w="6"/><text x="99.6891%" y="206.50"></text></g><g><title>get_relative_eef_orientation (omnigibson/robots/manipulation_robot.py:741) (6 samples, 0.34%)</title><rect x="99.4391%" y="212" width="0.3365%" height="15" fill="rgb(229,68,48)" fg:x="1773" fg:w="6"/><text x="99.6891%" y="222.50"></text></g><g><title>get_relative_eef_pose (omnigibson/robots/manipulation_robot.py:715) (3 samples, 0.17%)</title><rect x="99.6074%" y="228" width="0.1683%" height="15" fill="rgb(252,8,32)" fg:x="1776" fg:w="3"/><text x="99.8574%" y="238.50"></text></g><g><title>relative_pose_transform (omnigibson/utils/transform_utils.py:652) (2 samples, 0.11%)</title><rect x="99.6635%" y="244" width="0.1122%" height="15" fill="rgb(223,20,43)" fg:x="1777" fg:w="2"/><text x="99.9135%" y="254.50"></text></g><g><title>get_proprioception (omnigibson/robots/robot_base.py:317) (22 samples, 1.23%)</title><rect x="98.6540%" y="164" width="1.2339%" height="15" fill="rgb(229,81,49)" fg:x="1759" fg:w="22"/><text x="98.9040%" y="174.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/fetch.py:292) (2 samples, 0.11%)</title><rect x="99.7757%" y="180" width="0.1122%" height="15" fill="rgb(236,28,36)" fg:x="1779" fg:w="2"/><text x="100.0257%" y="190.50"></text></g><g><title>get_joint_positions (omnigibson/prims/entity_prim.py:832) (2 samples, 0.11%)</title><rect x="99.7757%" y="196" width="0.1122%" height="15" fill="rgb(249,185,26)" fg:x="1779" fg:w="2"/><text x="100.0257%" y="206.50"></text></g><g><title>_post_step (omnigibson/envs/env_base.py:542) (23 samples, 1.29%)</title><rect x="98.6540%" y="116" width="1.2900%" height="15" fill="rgb(249,174,33)" fg:x="1759" fg:w="23"/><text x="98.9040%" y="126.50"></text></g><g><title>get_obs (omnigibson/envs/env_base.py:473) (23 samples, 1.29%)</title><rect x="98.6540%" y="132" width="1.2900%" height="15" fill="rgb(233,201,37)" fg:x="1759" fg:w="23"/><text x="98.9040%" y="142.50"></text></g><g><title>get_obs (omnigibson/robots/robot_base.py:307) (23 samples, 1.29%)</title><rect x="98.6540%" y="148" width="1.2900%" height="15" fill="rgb(221,78,26)" fg:x="1759" fg:w="23"/><text x="98.9040%" y="158.50"></text></g><g><title>all (1,783 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="1783"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (test_multiple_envs.py:77) (1,783 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="1783"/><text x="0.2500%" y="78.50">&lt;module&gt; (test_multiple_envs.py:77)</text></g><g><title>main (test_multiple_envs.py:56) (1,782 samples, 99.94%)</title><rect x="0.0561%" y="84" width="99.9439%" height="15" fill="rgb(229,67,23)" fg:x="1" fg:w="1782"/><text x="0.3061%" y="94.50">main (test_multiple_envs.py:56)</text></g><g><title>step (omnigibson/envs/vec_env_base.py:18) (24 samples, 1.35%)</title><rect x="98.6540%" y="100" width="1.3460%" height="15" fill="rgb(249,83,47)" fg:x="1759" fg:w="24"/><text x="98.9040%" y="110.50"></text></g></svg></svg>
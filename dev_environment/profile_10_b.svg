<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="394" onload="init(evt)" viewBox="0 0 1200 394" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="394" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile_10_b.svg --pid 7962</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="383.00"> </text><svg id="frames" x="10" width="1180" total_samples="1490"><g><title>_preprocess_command (omnigibson/controllers/multi_finger_gripper_controller.py:152) (2 samples, 0.13%)</title><rect x="0.1342%" y="164" width="0.1342%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.3842%" y="174.50"></text></g><g><title>_preprocess_command (omnigibson/controllers/controller_base.py:183) (2 samples, 0.13%)</title><rect x="0.1342%" y="180" width="0.1342%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.3842%" y="190.50"></text></g><g><title>step (omnigibson/envs/vec_env_base.py:14) (5 samples, 0.34%)</title><rect x="0.0671%" y="100" width="0.3356%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="5"/><text x="0.3171%" y="110.50"></text></g><g><title>_pre_step (omnigibson/envs/env_base.py:538) (4 samples, 0.27%)</title><rect x="0.1342%" y="116" width="0.2685%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="4"/><text x="0.3842%" y="126.50"></text></g><g><title>apply_action (omnigibson/objects/controllable_object.py:315) (4 samples, 0.27%)</title><rect x="0.1342%" y="132" width="0.2685%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="4"/><text x="0.3842%" y="142.50"></text></g><g><title>update_goal (omnigibson/controllers/controller_base.py:204) (4 samples, 0.27%)</title><rect x="0.1342%" y="148" width="0.2685%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="4"/><text x="0.3842%" y="158.50"></text></g><g><title>step (omnigibson/simulator.py:772) (2 samples, 0.13%)</title><rect x="0.4027%" y="116" width="0.1342%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="2"/><text x="0.6527%" y="126.50"></text></g><g><title>n_physics_timesteps_per_render (omnigibson/simulator.py:753) (2 samples, 0.13%)</title><rect x="0.4027%" y="132" width="0.1342%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="2"/><text x="0.6527%" y="142.50"></text></g><g><title>get_physics_dt (core/simulation_context/simulation_context.py:475) (2 samples, 0.13%)</title><rect x="0.4027%" y="148" width="0.1342%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="2"/><text x="0.6527%" y="158.50"></text></g><g><title>get_physics_dt (core/physics_context/physics_context.py:310) (2 samples, 0.13%)</title><rect x="0.4027%" y="164" width="0.1342%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="2"/><text x="0.6527%" y="174.50"></text></g><g><title>step (core/simulation_context/simulation_context.py:689) (2 samples, 0.13%)</title><rect x="0.5369%" y="132" width="0.1342%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="2"/><text x="0.7869%" y="142.50"></text></g><g><title>stage (core/simulation_context/simulation_context.py:291) (2 samples, 0.13%)</title><rect x="0.5369%" y="148" width="0.1342%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="2"/><text x="0.7869%" y="158.50"></text></g><g><title>get_current_stage (core/utils/stage.py:52) (2 samples, 0.13%)</title><rect x="0.5369%" y="164" width="0.1342%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="2"/><text x="0.7869%" y="174.50"></text></g><g><title>_step (core/physics_context/physics_context.py:573) (6 samples, 0.40%)</title><rect x="0.6711%" y="148" width="0.4027%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="6"/><text x="0.9211%" y="158.50"></text></g><g><title>get_joint_positions (core/articulations/articulation_view.py:1445) (2 samples, 0.13%)</title><rect x="61.6779%" y="212" width="0.1342%" height="15" fill="rgb(217,207,13)" fg:x="919" fg:w="2"/><text x="61.9279%" y="222.50"></text></g><g><title>get_joint_positions (omnigibson/prims/entity_prim.py:832) (11 samples, 0.74%)</title><rect x="61.4765%" y="196" width="0.7383%" height="15" fill="rgb(231,73,38)" fg:x="916" fg:w="11"/><text x="61.7265%" y="206.50"></text></g><g><title>get_joint_positions (core/articulations/articulation_view.py:1451) (5 samples, 0.34%)</title><rect x="61.8792%" y="212" width="0.3356%" height="15" fill="rgb(225,20,46)" fg:x="922" fg:w="5"/><text x="62.1292%" y="222.50"></text></g><g><title>expand_dims (core/utils/numpy/tensor.py:64) (5 samples, 0.34%)</title><rect x="61.8792%" y="228" width="0.3356%" height="15" fill="rgb(210,31,41)" fg:x="922" fg:w="5"/><text x="62.1292%" y="238.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:180) (5 samples, 0.34%)</title><rect x="61.8792%" y="244" width="0.3356%" height="15" fill="rgb(221,200,47)" fg:x="922" fg:w="5"/><text x="62.1292%" y="254.50"></text></g><g><title>_articulation_view (omnigibson/prims/entity_prim.py:360) (2 samples, 0.13%)</title><rect x="62.3490%" y="212" width="0.1342%" height="15" fill="rgb(226,26,5)" fg:x="929" fg:w="2"/><text x="62.5990%" y="222.50"></text></g><g><title>set_dof_positions (tensors/impl/api.py:443) (2 samples, 0.13%)</title><rect x="62.6174%" y="228" width="0.1342%" height="15" fill="rgb(249,33,26)" fg:x="933" fg:w="2"/><text x="62.8674%" y="238.50"></text></g><g><title>as_contiguous_float32 (tensors/impl/frontend_np.py:67) (2 samples, 0.13%)</title><rect x="62.6174%" y="244" width="0.1342%" height="15" fill="rgb(235,183,28)" fg:x="933" fg:w="2"/><text x="62.8674%" y="254.50"></text></g><g><title>set_dof_positions (tensors/impl/api.py:445) (3 samples, 0.20%)</title><rect x="62.8188%" y="228" width="0.2013%" height="15" fill="rgb(221,5,38)" fg:x="936" fg:w="3"/><text x="63.0688%" y="238.50"></text></g><g><title>get_tensor_desc (tensors/impl/frontend_np.py:62) (2 samples, 0.13%)</title><rect x="62.8859%" y="244" width="0.1342%" height="15" fill="rgb(247,18,42)" fg:x="937" fg:w="2"/><text x="63.1359%" y="254.50"></text></g><g><title>set_joint_positions (omnigibson/utils/deprecated_utils.py:481) (10 samples, 0.67%)</title><rect x="62.6174%" y="212" width="0.6711%" height="15" fill="rgb(241,131,45)" fg:x="933" fg:w="10"/><text x="62.8674%" y="222.50"></text></g><g><title>set_dof_positions (tensors/impl/api.py:448) (4 samples, 0.27%)</title><rect x="63.0201%" y="228" width="0.2685%" height="15" fill="rgb(249,31,29)" fg:x="939" fg:w="4"/><text x="63.2701%" y="238.50"></text></g><g><title>step (omnigibson/robots/robot_base.py:281) (28 samples, 1.88%)</title><rect x="61.4765%" y="180" width="1.8792%" height="15" fill="rgb(225,111,53)" fg:x="916" fg:w="28"/><text x="61.7265%" y="190.50">s..</text></g><g><title>set_joint_positions (omnigibson/prims/entity_prim.py:636) (16 samples, 1.07%)</title><rect x="62.2819%" y="196" width="1.0738%" height="15" fill="rgb(238,160,17)" fg:x="928" fg:w="16"/><text x="62.5319%" y="206.50"></text></g><g><title>get_joint_velocities (omnigibson/prims/entity_prim.py:850) (3 samples, 0.20%)</title><rect x="63.4228%" y="196" width="0.2013%" height="15" fill="rgb(214,148,48)" fg:x="945" fg:w="3"/><text x="63.6728%" y="206.50"></text></g><g><title>get_joint_velocities (core/articulations/articulation_view.py:1513) (2 samples, 0.13%)</title><rect x="63.4899%" y="212" width="0.1342%" height="15" fill="rgb(232,36,49)" fg:x="946" fg:w="2"/><text x="63.7399%" y="222.50"></text></g><g><title>clone_tensor (core/utils/numpy/tensor.py:43) (2 samples, 0.13%)</title><rect x="63.4899%" y="228" width="0.1342%" height="15" fill="rgb(209,103,24)" fg:x="946" fg:w="2"/><text x="63.7399%" y="238.50"></text></g><g><title>copy (&lt;__array_function__ internals&gt;:180) (2 samples, 0.13%)</title><rect x="63.4899%" y="244" width="0.1342%" height="15" fill="rgb(229,88,8)" fg:x="946" fg:w="2"/><text x="63.7399%" y="254.50"></text></g><g><title>copy (numpy/lib/function_base.py:959) (2 samples, 0.13%)</title><rect x="63.4899%" y="260" width="0.1342%" height="15" fill="rgb(213,181,19)" fg:x="946" fg:w="2"/><text x="63.7399%" y="270.50"></text></g><g><title>set_joint_velocities (omnigibson/utils/deprecated_utils.py:542) (2 samples, 0.13%)</title><rect x="63.7584%" y="212" width="0.1342%" height="15" fill="rgb(254,191,54)" fg:x="950" fg:w="2"/><text x="64.0084%" y="222.50"></text></g><g><title>assign (core/utils/numpy/tensor.py:91) (2 samples, 0.13%)</title><rect x="63.7584%" y="228" width="0.1342%" height="15" fill="rgb(241,83,37)" fg:x="950" fg:w="2"/><text x="64.0084%" y="238.50"></text></g><g><title>set_joint_velocity_targets (core/articulations/articulation_view.py:1024) (2 samples, 0.13%)</title><rect x="64.0268%" y="228" width="0.1342%" height="15" fill="rgb(233,36,39)" fg:x="954" fg:w="2"/><text x="64.2768%" y="238.50"></text></g><g><title>set_joint_velocity_targets (core/articulations/articulation_view.py:1028) (2 samples, 0.13%)</title><rect x="64.1611%" y="228" width="0.1342%" height="15" fill="rgb(226,3,54)" fg:x="956" fg:w="2"/><text x="64.4111%" y="238.50"></text></g><g><title>assign (core/utils/numpy/tensor.py:91) (2 samples, 0.13%)</title><rect x="64.1611%" y="244" width="0.1342%" height="15" fill="rgb(245,192,40)" fg:x="956" fg:w="2"/><text x="64.4111%" y="254.50"></text></g><g><title>set_dof_velocity_targets (tensors/impl/api.py:480) (2 samples, 0.13%)</title><rect x="64.3624%" y="244" width="0.1342%" height="15" fill="rgb(238,167,29)" fg:x="959" fg:w="2"/><text x="64.6124%" y="254.50"></text></g><g><title>as_contiguous_uint32 (tensors/impl/frontend_np.py:70) (2 samples, 0.13%)</title><rect x="64.3624%" y="260" width="0.1342%" height="15" fill="rgb(232,182,51)" fg:x="959" fg:w="2"/><text x="64.6124%" y="270.50"></text></g><g><title>set_dof_velocity_targets (tensors/impl/api.py:481) (2 samples, 0.13%)</title><rect x="64.4966%" y="244" width="0.1342%" height="15" fill="rgb(231,60,39)" fg:x="961" fg:w="2"/><text x="64.7466%" y="254.50"></text></g><g><title>step (omnigibson/robots/robot_base.py:282) (22 samples, 1.48%)</title><rect x="63.3557%" y="180" width="1.4765%" height="15" fill="rgb(208,69,12)" fg:x="944" fg:w="22"/><text x="63.6057%" y="190.50"></text></g><g><title>set_joint_velocities (omnigibson/prims/entity_prim.py:667) (18 samples, 1.21%)</title><rect x="63.6242%" y="196" width="1.2081%" height="15" fill="rgb(235,93,37)" fg:x="948" fg:w="18"/><text x="63.8742%" y="206.50"></text></g><g><title>set_joint_velocities (omnigibson/utils/deprecated_utils.py:551) (12 samples, 0.81%)</title><rect x="64.0268%" y="212" width="0.8054%" height="15" fill="rgb(213,116,39)" fg:x="954" fg:w="12"/><text x="64.2768%" y="222.50"></text></g><g><title>set_joint_velocity_targets (core/articulations/articulation_view.py:1033) (7 samples, 0.47%)</title><rect x="64.3624%" y="228" width="0.4698%" height="15" fill="rgb(222,207,29)" fg:x="959" fg:w="7"/><text x="64.6124%" y="238.50"></text></g><g><title>set_dof_velocity_targets (tensors/impl/api.py:484) (3 samples, 0.20%)</title><rect x="64.6309%" y="244" width="0.2013%" height="15" fill="rgb(206,96,30)" fg:x="963" fg:w="3"/><text x="64.8809%" y="254.50"></text></g><g><title>_articulation_view (omnigibson/prims/entity_prim.py:360) (2 samples, 0.13%)</title><rect x="65.0336%" y="212" width="0.1342%" height="15" fill="rgb(218,138,4)" fg:x="969" fg:w="2"/><text x="65.2836%" y="222.50"></text></g><g><title>check (tensors/impl/api.py:828) (2 samples, 0.13%)</title><rect x="65.0336%" y="228" width="0.1342%" height="15" fill="rgb(250,191,14)" fg:x="969" fg:w="2"/><text x="65.2836%" y="238.50"></text></g><g><title>normalize_axis_tuple (numpy/core/numeric.py:1393) (2 samples, 0.13%)</title><rect x="65.5034%" y="276" width="0.1342%" height="15" fill="rgb(239,60,40)" fg:x="976" fg:w="2"/><text x="65.7534%" y="286.50"></text></g><g><title>roll (numpy/core/numeric.py:1228) (3 samples, 0.20%)</title><rect x="65.5034%" y="260" width="0.2013%" height="15" fill="rgb(206,27,48)" fg:x="976" fg:w="3"/><text x="65.7534%" y="270.50"></text></g><g><title>get_position_orientation (omnigibson/prims/entity_prim.py:950) (14 samples, 0.94%)</title><rect x="65.0336%" y="196" width="0.9396%" height="15" fill="rgb(225,35,8)" fg:x="969" fg:w="14"/><text x="65.2836%" y="206.50"></text></g><g><title>get_world_poses (core/articulations/articulation_view.py:1803) (9 samples, 0.60%)</title><rect x="65.3691%" y="212" width="0.6040%" height="15" fill="rgb(250,213,24)" fg:x="974" fg:w="9"/><text x="65.6191%" y="222.50"></text></g><g><title>xyzw2wxyz (core/utils/numpy/rotations.py:191) (9 samples, 0.60%)</title><rect x="65.3691%" y="228" width="0.6040%" height="15" fill="rgb(247,123,22)" fg:x="974" fg:w="9"/><text x="65.6191%" y="238.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (8 samples, 0.54%)</title><rect x="65.4362%" y="244" width="0.5369%" height="15" fill="rgb(231,138,38)" fg:x="975" fg:w="8"/><text x="65.6862%" y="254.50"></text></g><g><title>get_position_orientation (omnigibson/prims/entity_prim.py:951) (2 samples, 0.13%)</title><rect x="65.9732%" y="196" width="0.1342%" height="15" fill="rgb(231,145,46)" fg:x="983" fg:w="2"/><text x="66.2232%" y="206.50"></text></g><g><title>set_position_orientation (omnigibson/prims/entity_prim.py:924) (6 samples, 0.40%)</title><rect x="66.1074%" y="196" width="0.4027%" height="15" fill="rgb(251,118,11)" fg:x="985" fg:w="6"/><text x="66.3574%" y="206.50"></text></g><g><title>kinematic_only (omnigibson/prims/entity_prim.py:1249) (6 samples, 0.40%)</title><rect x="66.1074%" y="212" width="0.4027%" height="15" fill="rgb(217,147,25)" fg:x="985" fg:w="6"/><text x="66.3574%" y="222.50"></text></g><g><title>kinematic_only (omnigibson/prims/rigid_prim.py:498) (6 samples, 0.40%)</title><rect x="66.1074%" y="228" width="0.4027%" height="15" fill="rgb(247,81,37)" fg:x="985" fg:w="6"/><text x="66.3574%" y="238.50"></text></g><g><title>get_attribute (omnigibson/prims/prim_base.py:222) (6 samples, 0.40%)</title><rect x="66.1074%" y="244" width="0.4027%" height="15" fill="rgb(209,12,38)" fg:x="985" fg:w="6"/><text x="66.3574%" y="254.50"></text></g><g><title>set_position_orientation (omnigibson/prims/entity_prim.py:935) (2 samples, 0.13%)</title><rect x="66.5101%" y="196" width="0.1342%" height="15" fill="rgb(227,1,9)" fg:x="991" fg:w="2"/><text x="66.7601%" y="206.50"></text></g><g><title>set_world_poses (core/articulations/articulation_view.py:1728) (6 samples, 0.40%)</title><rect x="66.7114%" y="212" width="0.4027%" height="15" fill="rgb(248,47,43)" fg:x="994" fg:w="6"/><text x="66.9614%" y="222.50"></text></g><g><title>get_world_poses (core/articulations/articulation_view.py:1803) (3 samples, 0.20%)</title><rect x="66.9128%" y="228" width="0.2013%" height="15" fill="rgb(221,10,30)" fg:x="997" fg:w="3"/><text x="67.1628%" y="238.50"></text></g><g><title>xyzw2wxyz (core/utils/numpy/rotations.py:191) (3 samples, 0.20%)</title><rect x="66.9128%" y="244" width="0.2013%" height="15" fill="rgb(210,229,1)" fg:x="997" fg:w="3"/><text x="67.1628%" y="254.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (3 samples, 0.20%)</title><rect x="66.9128%" y="260" width="0.2013%" height="15" fill="rgb(222,148,37)" fg:x="997" fg:w="3"/><text x="67.1628%" y="270.50"></text></g><g><title>assign_pose (core/utils/numpy/transformations.py:73) (2 samples, 0.13%)</title><rect x="67.1812%" y="228" width="0.1342%" height="15" fill="rgb(234,67,33)" fg:x="1001" fg:w="2"/><text x="67.4312%" y="238.50"></text></g><g><title>wxyz2xyzw (core/utils/numpy/rotations.py:195) (2 samples, 0.13%)</title><rect x="67.1812%" y="244" width="0.1342%" height="15" fill="rgb(247,98,35)" fg:x="1001" fg:w="2"/><text x="67.4312%" y="254.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (2 samples, 0.13%)</title><rect x="67.1812%" y="260" width="0.1342%" height="15" fill="rgb(247,138,52)" fg:x="1001" fg:w="2"/><text x="67.4312%" y="270.50"></text></g><g><title>set_world_poses (core/articulations/articulation_view.py:1737) (4 samples, 0.27%)</title><rect x="67.1812%" y="212" width="0.2685%" height="15" fill="rgb(213,79,30)" fg:x="1001" fg:w="4"/><text x="67.4312%" y="222.50"></text></g><g><title>get_tensor_desc (tensors/impl/frontend_np.py:59) (2 samples, 0.13%)</title><rect x="67.5168%" y="244" width="0.1342%" height="15" fill="rgb(246,177,23)" fg:x="1006" fg:w="2"/><text x="67.7668%" y="254.50"></text></g><g><title>set_root_transforms (tensors/impl/api.py:405) (6 samples, 0.40%)</title><rect x="67.4497%" y="228" width="0.4027%" height="15" fill="rgb(230,62,27)" fg:x="1005" fg:w="6"/><text x="67.6997%" y="238.50"></text></g><g><title>get_tensor_desc (tensors/impl/frontend_np.py:62) (2 samples, 0.13%)</title><rect x="67.7181%" y="244" width="0.1342%" height="15" fill="rgb(216,154,8)" fg:x="1009" fg:w="2"/><text x="67.9681%" y="254.50"></text></g><g><title>set_position_orientation (omnigibson/prims/entity_prim.py:938) (18 samples, 1.21%)</title><rect x="66.7114%" y="196" width="1.2081%" height="15" fill="rgb(244,35,45)" fg:x="994" fg:w="18"/><text x="66.9614%" y="206.50"></text></g><g><title>set_world_poses (core/articulations/articulation_view.py:1740) (7 samples, 0.47%)</title><rect x="67.4497%" y="212" width="0.4698%" height="15" fill="rgb(251,115,12)" fg:x="1005" fg:w="7"/><text x="67.6997%" y="222.50"></text></g><g><title>step (omnigibson/robots/robot_base.py:283) (48 samples, 3.22%)</title><rect x="64.8322%" y="180" width="3.2215%" height="15" fill="rgb(240,54,50)" fg:x="966" fg:w="48"/><text x="65.0822%" y="190.50">ste..</text></g><g><title>set_position_orientation (omnigibson/prims/entity_prim.py:939) (2 samples, 0.13%)</title><rect x="67.9195%" y="196" width="0.1342%" height="15" fill="rgb(233,84,52)" fg:x="1012" fg:w="2"/><text x="68.1695%" y="206.50"></text></g><g><title>get_control_dict (omnigibson/robots/manipulation_robot.py:378) (3 samples, 0.20%)</title><rect x="68.0537%" y="212" width="0.2013%" height="15" fill="rgb(207,117,47)" fg:x="1014" fg:w="3"/><text x="68.3037%" y="222.50"></text></g><g><title>step (omnigibson/objects/controllable_object.py:332) (7 samples, 0.47%)</title><rect x="68.0537%" y="196" width="0.4698%" height="15" fill="rgb(249,43,39)" fg:x="1014" fg:w="7"/><text x="68.3037%" y="206.50"></text></g><g><title>get_control_dict (omnigibson/robots/manipulation_robot.py:381) (4 samples, 0.27%)</title><rect x="68.2550%" y="212" width="0.2685%" height="15" fill="rgb(209,38,44)" fg:x="1017" fg:w="4"/><text x="68.5050%" y="222.50"></text></g><g><title>_add_arm_control_dict (omnigibson/robots/manipulation_robot.py:402) (2 samples, 0.13%)</title><rect x="68.3893%" y="228" width="0.1342%" height="15" fill="rgb(236,212,23)" fg:x="1019" fg:w="2"/><text x="68.6393%" y="238.50"></text></g><g><title>eef_links (omnigibson/robots/manipulation_robot.py:604) (2 samples, 0.13%)</title><rect x="68.3893%" y="244" width="0.1342%" height="15" fill="rgb(242,79,21)" fg:x="1019" fg:w="2"/><text x="68.6393%" y="254.50"></text></g><g><title>arm_names (omnigibson/robots/manipulation_robot.py:490) (2 samples, 0.13%)</title><rect x="68.3893%" y="260" width="0.1342%" height="15" fill="rgb(211,96,35)" fg:x="1019" fg:w="2"/><text x="68.6393%" y="270.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:509) (5 samples, 0.34%)</title><rect x="68.8591%" y="276" width="0.3356%" height="15" fill="rgb(253,215,40)" fg:x="1026" fg:w="5"/><text x="69.1091%" y="286.50"></text></g><g><title>get_joint_positions (omnigibson/prims/entity_prim.py:832) (5 samples, 0.34%)</title><rect x="68.8591%" y="292" width="0.3356%" height="15" fill="rgb(211,81,21)" fg:x="1026" fg:w="5"/><text x="69.1091%" y="302.50"></text></g><g><title>get_joint_positions (core/articulations/articulation_view.py:1451) (2 samples, 0.13%)</title><rect x="69.0604%" y="308" width="0.1342%" height="15" fill="rgb(208,190,38)" fg:x="1029" fg:w="2"/><text x="69.3104%" y="318.50"></text></g><g><title>expand_dims (core/utils/numpy/tensor.py:64) (2 samples, 0.13%)</title><rect x="69.0604%" y="324" width="0.1342%" height="15" fill="rgb(235,213,38)" fg:x="1029" fg:w="2"/><text x="69.3104%" y="334.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:180) (2 samples, 0.13%)</title><rect x="69.0604%" y="340" width="0.1342%" height="15" fill="rgb(237,122,38)" fg:x="1029" fg:w="2"/><text x="69.3104%" y="350.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:597) (2 samples, 0.13%)</title><rect x="69.0604%" y="356" width="0.1342%" height="15" fill="rgb(244,218,35)" fg:x="1029" fg:w="2"/><text x="69.3104%" y="366.50"></text></g><g><title>get_joint_velocities (core/articulations/articulation_view.py:1508) (3 samples, 0.20%)</title><rect x="69.1946%" y="308" width="0.2013%" height="15" fill="rgb(240,68,47)" fg:x="1031" fg:w="3"/><text x="69.4446%" y="318.50"></text></g><g><title>get_timeline_interface (timeline/__init__.py:9) (2 samples, 0.13%)</title><rect x="69.2617%" y="324" width="0.1342%" height="15" fill="rgb(210,16,53)" fg:x="1032" fg:w="2"/><text x="69.5117%" y="334.50"></text></g><g><title>__getitem__ (omnigibson/utils/python_utils.py:728) (12 samples, 0.81%)</title><rect x="68.7248%" y="244" width="0.8054%" height="15" fill="rgb(235,124,12)" fg:x="1024" fg:w="12"/><text x="68.9748%" y="254.50"></text></g><g><title>get (omnigibson/utils/python_utils.py:747) (11 samples, 0.74%)</title><rect x="68.7919%" y="260" width="0.7383%" height="15" fill="rgb(224,169,11)" fg:x="1025" fg:w="11"/><text x="69.0419%" y="270.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:510) (5 samples, 0.34%)</title><rect x="69.1946%" y="276" width="0.3356%" height="15" fill="rgb(250,166,2)" fg:x="1031" fg:w="5"/><text x="69.4446%" y="286.50"></text></g><g><title>get_joint_velocities (omnigibson/prims/entity_prim.py:850) (5 samples, 0.34%)</title><rect x="69.1946%" y="292" width="0.3356%" height="15" fill="rgb(242,216,29)" fg:x="1031" fg:w="5"/><text x="69.4446%" y="302.50"></text></g><g><title>compute_control (omnigibson/controllers/joint_controller.py:166) (13 samples, 0.87%)</title><rect x="68.7248%" y="228" width="0.8725%" height="15" fill="rgb(230,116,27)" fg:x="1024" fg:w="13"/><text x="68.9748%" y="238.50"></text></g><g><title>_broadcast_to (numpy/lib/stride_tricks.py:357) (2 samples, 0.13%)</title><rect x="70.0000%" y="324" width="0.1342%" height="15" fill="rgb(228,99,48)" fg:x="1043" fg:w="2"/><text x="70.2500%" y="334.50"></text></g><g><title>meshgrid (numpy/lib/function_base.py:4987) (6 samples, 0.40%)</title><rect x="69.7987%" y="260" width="0.4027%" height="15" fill="rgb(253,11,6)" fg:x="1040" fg:w="6"/><text x="70.0487%" y="270.50"></text></g><g><title>broadcast_arrays (&lt;__array_function__ internals&gt;:180) (6 samples, 0.40%)</title><rect x="69.7987%" y="276" width="0.4027%" height="15" fill="rgb(247,143,39)" fg:x="1040" fg:w="6"/><text x="70.0487%" y="286.50"></text></g><g><title>broadcast_arrays (numpy/lib/stride_tricks.py:546) (5 samples, 0.34%)</title><rect x="69.8658%" y="292" width="0.3356%" height="15" fill="rgb(236,97,10)" fg:x="1041" fg:w="5"/><text x="70.1158%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (numpy/lib/stride_tricks.py:546) (5 samples, 0.34%)</title><rect x="69.8658%" y="308" width="0.3356%" height="15" fill="rgb(233,208,19)" fg:x="1041" fg:w="5"/><text x="70.1158%" y="318.50"></text></g><g><title>compute_control (omnigibson/controllers/joint_controller.py:183) (8 samples, 0.54%)</title><rect x="69.7987%" y="228" width="0.5369%" height="15" fill="rgb(216,164,2)" fg:x="1040" fg:w="8"/><text x="70.0487%" y="238.50"></text></g><g><title>meshgrid (&lt;__array_function__ internals&gt;:180) (8 samples, 0.54%)</title><rect x="69.7987%" y="244" width="0.5369%" height="15" fill="rgb(220,129,5)" fg:x="1040" fg:w="8"/><text x="70.0487%" y="254.50"></text></g><g><title>meshgrid (numpy/lib/function_base.py:4990) (2 samples, 0.13%)</title><rect x="70.2013%" y="260" width="0.1342%" height="15" fill="rgb(242,17,10)" fg:x="1046" fg:w="2"/><text x="70.4513%" y="270.50"></text></g><g><title>get_mass_matrices (core/articulations/articulation_view.py:3655) (2 samples, 0.13%)</title><rect x="70.7383%" y="308" width="0.1342%" height="15" fill="rgb(242,107,0)" fg:x="1054" fg:w="2"/><text x="70.9883%" y="318.50"></text></g><g><title>compute_control (omnigibson/controllers/joint_controller.py:184) (10 samples, 0.67%)</title><rect x="70.3356%" y="228" width="0.6711%" height="15" fill="rgb(251,28,31)" fg:x="1048" fg:w="10"/><text x="70.5856%" y="238.50"></text></g><g><title>__getitem__ (omnigibson/utils/python_utils.py:728) (9 samples, 0.60%)</title><rect x="70.4027%" y="244" width="0.6040%" height="15" fill="rgb(233,223,10)" fg:x="1049" fg:w="9"/><text x="70.6527%" y="254.50"></text></g><g><title>get (omnigibson/utils/python_utils.py:747) (6 samples, 0.40%)</title><rect x="70.6040%" y="260" width="0.4027%" height="15" fill="rgb(215,21,27)" fg:x="1052" fg:w="6"/><text x="70.8540%" y="270.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:512) (6 samples, 0.40%)</title><rect x="70.6040%" y="276" width="0.4027%" height="15" fill="rgb(232,23,21)" fg:x="1052" fg:w="6"/><text x="70.8540%" y="286.50"></text></g><g><title>get_mass_matrix (omnigibson/prims/entity_prim.py:1320) (6 samples, 0.40%)</title><rect x="70.6040%" y="292" width="0.4027%" height="15" fill="rgb(244,5,23)" fg:x="1052" fg:w="6"/><text x="70.8540%" y="302.50"></text></g><g><title>get_mass_matrices (core/articulations/articulation_view.py:3656) (2 samples, 0.13%)</title><rect x="70.8725%" y="308" width="0.1342%" height="15" fill="rgb(226,81,46)" fg:x="1056" fg:w="2"/><text x="71.1225%" y="318.50"></text></g><g><title>get_mass_matrices (tensors/impl/api.py:587) (2 samples, 0.13%)</title><rect x="70.8725%" y="324" width="0.1342%" height="15" fill="rgb(247,70,30)" fg:x="1056" fg:w="2"/><text x="71.1225%" y="334.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:513) (3 samples, 0.20%)</title><rect x="71.4765%" y="276" width="0.2013%" height="15" fill="rgb(212,68,19)" fg:x="1065" fg:w="3"/><text x="71.7265%" y="286.50"></text></g><g><title>get_generalized_gravity_forces (omnigibson/robots/robot_base.py:494) (3 samples, 0.20%)</title><rect x="71.4765%" y="292" width="0.2013%" height="15" fill="rgb(240,187,13)" fg:x="1065" fg:w="3"/><text x="71.7265%" y="302.50"></text></g><g><title>get_generalized_gravity_forces (omnigibson/prims/entity_prim.py:1309) (3 samples, 0.20%)</title><rect x="71.4765%" y="308" width="0.2013%" height="15" fill="rgb(223,113,26)" fg:x="1065" fg:w="3"/><text x="71.7265%" y="318.50"></text></g><g><title>compute_control (omnigibson/controllers/joint_controller.py:188) (11 samples, 0.74%)</title><rect x="71.0738%" y="228" width="0.7383%" height="15" fill="rgb(206,192,2)" fg:x="1059" fg:w="11"/><text x="71.3238%" y="238.50"></text></g><g><title>__getitem__ (omnigibson/utils/python_utils.py:728) (6 samples, 0.40%)</title><rect x="71.4094%" y="244" width="0.4027%" height="15" fill="rgb(241,108,4)" fg:x="1064" fg:w="6"/><text x="71.6594%" y="254.50"></text></g><g><title>get (omnigibson/utils/python_utils.py:747) (5 samples, 0.34%)</title><rect x="71.4765%" y="260" width="0.3356%" height="15" fill="rgb(247,173,49)" fg:x="1065" fg:w="5"/><text x="71.7265%" y="270.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:514) (2 samples, 0.13%)</title><rect x="71.6779%" y="276" width="0.1342%" height="15" fill="rgb(224,114,35)" fg:x="1068" fg:w="2"/><text x="71.9279%" y="286.50"></text></g><g><title>get_coriolis_and_centrifugal_forces (omnigibson/prims/entity_prim.py:1298) (2 samples, 0.13%)</title><rect x="71.6779%" y="292" width="0.1342%" height="15" fill="rgb(245,159,27)" fg:x="1068" fg:w="2"/><text x="71.9279%" y="302.50"></text></g><g><title>_update_grasping_state (omnigibson/controllers/multi_finger_gripper_controller.py:240) (3 samples, 0.20%)</title><rect x="71.8792%" y="244" width="0.2013%" height="15" fill="rgb(245,172,44)" fg:x="1071" fg:w="3"/><text x="72.1292%" y="254.50"></text></g><g><title>step (omnigibson/controllers/controller_base.py:274) (55 samples, 3.69%)</title><rect x="68.5906%" y="212" width="3.6913%" height="15" fill="rgb(236,23,11)" fg:x="1022" fg:w="55"/><text x="68.8406%" y="222.50">step..</text></g><g><title>compute_control (omnigibson/controllers/multi_finger_gripper_controller.py:203) (6 samples, 0.40%)</title><rect x="71.8792%" y="228" width="0.4027%" height="15" fill="rgb(205,117,38)" fg:x="1071" fg:w="6"/><text x="72.1292%" y="238.50"></text></g><g><title>_clip (numpy/core/_methods.py:135) (2 samples, 0.13%)</title><rect x="72.2819%" y="244" width="0.1342%" height="15" fill="rgb(237,72,25)" fg:x="1077" fg:w="2"/><text x="72.5319%" y="254.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:94) (2 samples, 0.13%)</title><rect x="72.2819%" y="260" width="0.1342%" height="15" fill="rgb(244,70,9)" fg:x="1077" fg:w="2"/><text x="72.5319%" y="270.50"></text></g><g><title>clip_control (omnigibson/controllers/controller_base.py:246) (5 samples, 0.34%)</title><rect x="72.2819%" y="228" width="0.3356%" height="15" fill="rgb(217,125,39)" fg:x="1077" fg:w="5"/><text x="72.5319%" y="238.50"></text></g><g><title>_clip (numpy/core/_methods.py:160) (3 samples, 0.20%)</title><rect x="72.4161%" y="244" width="0.2013%" height="15" fill="rgb(235,36,10)" fg:x="1079" fg:w="3"/><text x="72.6661%" y="254.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:114) (3 samples, 0.20%)</title><rect x="72.4161%" y="260" width="0.2013%" height="15" fill="rgb(251,123,47)" fg:x="1079" fg:w="3"/><text x="72.6661%" y="270.50"></text></g><g><title>clip_control (omnigibson/controllers/controller_base.py:247) (4 samples, 0.27%)</title><rect x="72.6174%" y="228" width="0.2685%" height="15" fill="rgb(221,13,13)" fg:x="1082" fg:w="4"/><text x="72.8674%" y="238.50"></text></g><g><title>clip_control (omnigibson/controllers/controller_base.py:248) (2 samples, 0.13%)</title><rect x="72.8859%" y="228" width="0.1342%" height="15" fill="rgb(238,131,9)" fg:x="1086" fg:w="2"/><text x="73.1359%" y="238.50"></text></g><g><title>clip_control (omnigibson/controllers/controller_base.py:251) (2 samples, 0.13%)</title><rect x="73.0201%" y="228" width="0.1342%" height="15" fill="rgb(211,50,8)" fg:x="1088" fg:w="2"/><text x="73.2701%" y="238.50"></text></g><g><title>dof_idx (omnigibson/controllers/controller_base.py:452) (2 samples, 0.13%)</title><rect x="73.0201%" y="244" width="0.1342%" height="15" fill="rgb(245,182,24)" fg:x="1088" fg:w="2"/><text x="73.2701%" y="254.50"></text></g><g><title>step (omnigibson/controllers/controller_base.py:275) (14 samples, 0.94%)</title><rect x="72.2819%" y="212" width="0.9396%" height="15" fill="rgb(242,14,37)" fg:x="1077" fg:w="14"/><text x="72.5319%" y="222.50"></text></g><g><title>step (omnigibson/objects/controllable_object.py:336) (70 samples, 4.70%)</title><rect x="68.5906%" y="196" width="4.6980%" height="15" fill="rgb(246,228,12)" fg:x="1022" fg:w="70"/><text x="68.8406%" y="206.50">step ..</text></g><g><title>step (omnigibson/objects/controllable_object.py:345) (2 samples, 0.13%)</title><rect x="73.4228%" y="196" width="0.1342%" height="15" fill="rgb(213,55,15)" fg:x="1094" fg:w="2"/><text x="73.6728%" y="206.50"></text></g><g><title>step (omnigibson/objects/controllable_object.py:348) (2 samples, 0.13%)</title><rect x="73.6242%" y="196" width="0.1342%" height="15" fill="rgb(209,9,3)" fg:x="1097" fg:w="2"/><text x="73.8742%" y="206.50"></text></g><g><title>deploy_control (omnigibson/objects/controllable_object.py:428) (4 samples, 0.27%)</title><rect x="73.7584%" y="228" width="0.2685%" height="15" fill="rgb(230,59,30)" fg:x="1099" fg:w="4"/><text x="74.0084%" y="238.50"></text></g><g><title>set_joint_positions (omnigibson/prims/entity_prim.py:626) (2 samples, 0.13%)</title><rect x="74.0940%" y="260" width="0.1342%" height="15" fill="rgb(209,121,21)" fg:x="1104" fg:w="2"/><text x="74.3440%" y="270.50"></text></g><g><title>set_joint_position_targets (core/articulations/articulation_view.py:906) (3 samples, 0.20%)</title><rect x="74.3624%" y="276" width="0.2013%" height="15" fill="rgb(220,109,13)" fg:x="1108" fg:w="3"/><text x="74.6124%" y="286.50"></text></g><g><title>expand_dims (core/utils/numpy/tensor.py:64) (3 samples, 0.20%)</title><rect x="74.3624%" y="292" width="0.2013%" height="15" fill="rgb(232,18,1)" fg:x="1108" fg:w="3"/><text x="74.6124%" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:180) (3 samples, 0.20%)</title><rect x="74.3624%" y="308" width="0.2013%" height="15" fill="rgb(215,41,42)" fg:x="1108" fg:w="3"/><text x="74.6124%" y="318.50"></text></g><g><title>set_dof_position_targets (tensors/impl/api.py:472) (2 samples, 0.13%)</title><rect x="74.5638%" y="292" width="0.1342%" height="15" fill="rgb(224,123,36)" fg:x="1111" fg:w="2"/><text x="74.8138%" y="302.50"></text></g><g><title>deploy_control (omnigibson/objects/controllable_object.py:477) (12 samples, 0.81%)</title><rect x="74.0940%" y="228" width="0.8054%" height="15" fill="rgb(240,125,3)" fg:x="1104" fg:w="12"/><text x="74.3440%" y="238.50"></text></g><g><title>set_joint_positions (omnigibson/objects/controllable_object.py:526) (12 samples, 0.81%)</title><rect x="74.0940%" y="244" width="0.8054%" height="15" fill="rgb(205,98,50)" fg:x="1104" fg:w="12"/><text x="74.3440%" y="254.50"></text></g><g><title>set_joint_positions (omnigibson/prims/entity_prim.py:634) (10 samples, 0.67%)</title><rect x="74.2282%" y="260" width="0.6711%" height="15" fill="rgb(205,185,37)" fg:x="1106" fg:w="10"/><text x="74.4782%" y="270.50"></text></g><g><title>set_joint_position_targets (core/articulations/articulation_view.py:908) (5 samples, 0.34%)</title><rect x="74.5638%" y="276" width="0.3356%" height="15" fill="rgb(238,207,15)" fg:x="1111" fg:w="5"/><text x="74.8138%" y="286.50"></text></g><g><title>set_dof_position_targets (tensors/impl/api.py:475) (2 samples, 0.13%)</title><rect x="74.7651%" y="292" width="0.1342%" height="15" fill="rgb(213,199,42)" fg:x="1114" fg:w="2"/><text x="75.0151%" y="302.50"></text></g><g><title>set_joint_velocity_targets (core/articulations/articulation_view.py:1024) (2 samples, 0.13%)</title><rect x="74.9664%" y="260" width="0.1342%" height="15" fill="rgb(235,201,11)" fg:x="1117" fg:w="2"/><text x="75.2164%" y="270.50"></text></g><g><title>deploy_control (omnigibson/objects/controllable_object.py:479) (4 samples, 0.27%)</title><rect x="74.8993%" y="228" width="0.2685%" height="15" fill="rgb(207,46,11)" fg:x="1116" fg:w="4"/><text x="75.1493%" y="238.50"></text></g><g><title>set_joint_velocities (omnigibson/prims/entity_prim.py:665) (4 samples, 0.27%)</title><rect x="74.8993%" y="244" width="0.2685%" height="15" fill="rgb(241,35,35)" fg:x="1116" fg:w="4"/><text x="75.1493%" y="254.50"></text></g><g><title>set_dof_actuation_forces (tensors/impl/api.py:463) (2 samples, 0.13%)</title><rect x="75.3020%" y="276" width="0.1342%" height="15" fill="rgb(243,32,47)" fg:x="1122" fg:w="2"/><text x="75.5520%" y="286.50"></text></g><g><title>get_tensor_desc (tensors/impl/frontend_np.py:62) (2 samples, 0.13%)</title><rect x="75.3020%" y="292" width="0.1342%" height="15" fill="rgb(247,202,23)" fg:x="1122" fg:w="2"/><text x="75.5520%" y="302.50"></text></g><g><title>deploy_control (omnigibson/robots/manipulation_robot.py:333) (26 samples, 1.74%)</title><rect x="73.7584%" y="212" width="1.7450%" height="15" fill="rgb(219,102,11)" fg:x="1099" fg:w="26"/><text x="74.0084%" y="222.50"></text></g><g><title>deploy_control (omnigibson/objects/controllable_object.py:481) (5 samples, 0.34%)</title><rect x="75.1678%" y="228" width="0.3356%" height="15" fill="rgb(243,110,44)" fg:x="1120" fg:w="5"/><text x="75.4178%" y="238.50"></text></g><g><title>set_joint_efforts (omnigibson/prims/entity_prim.py:691) (5 samples, 0.34%)</title><rect x="75.1678%" y="244" width="0.3356%" height="15" fill="rgb(222,74,54)" fg:x="1120" fg:w="5"/><text x="75.4178%" y="254.50"></text></g><g><title>set_joint_efforts (omnigibson/utils/deprecated_utils.py:620) (3 samples, 0.20%)</title><rect x="75.3020%" y="260" width="0.2013%" height="15" fill="rgb(216,99,12)" fg:x="1122" fg:w="3"/><text x="75.5520%" y="270.50"></text></g><g><title>_mean (numpy/core/_methods.py:168) (2 samples, 0.13%)</title><rect x="75.7047%" y="276" width="0.1342%" height="15" fill="rgb(226,22,26)" fg:x="1128" fg:w="2"/><text x="75.9547%" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py:180) (4 samples, 0.27%)</title><rect x="75.8389%" y="276" width="0.2685%" height="15" fill="rgb(217,163,10)" fg:x="1130" fg:w="4"/><text x="76.0889%" y="286.50"></text></g><g><title>_handle_assisted_grasping (omnigibson/robots/manipulation_robot.py:1238) (9 samples, 0.60%)</title><rect x="75.5705%" y="228" width="0.6040%" height="15" fill="rgb(213,25,53)" fg:x="1126" fg:w="9"/><text x="75.8205%" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:180) (7 samples, 0.47%)</title><rect x="75.7047%" y="244" width="0.4698%" height="15" fill="rgb(252,105,26)" fg:x="1128" fg:w="7"/><text x="75.9547%" y="254.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3432) (7 samples, 0.47%)</title><rect x="75.7047%" y="260" width="0.4698%" height="15" fill="rgb(220,39,43)" fg:x="1128" fg:w="7"/><text x="75.9547%" y="270.50"></text></g><g><title>_handle_assisted_grasping (omnigibson/robots/manipulation_robot.py:1242) (2 samples, 0.13%)</title><rect x="76.1745%" y="228" width="0.1342%" height="15" fill="rgb(229,68,48)" fg:x="1135" fg:w="2"/><text x="76.4245%" y="238.50"></text></g><g><title>contact_list (omnigibson/prims/rigid_prim.py:254) (11 samples, 0.74%)</title><rect x="76.3758%" y="308" width="0.7383%" height="15" fill="rgb(252,8,32)" fg:x="1138" fg:w="11"/><text x="76.6258%" y="318.50"></text></g><g><title>contact_reporting_enabled (omnigibson/prims/rigid_prim.py:604) (11 samples, 0.74%)</title><rect x="76.3758%" y="324" width="0.7383%" height="15" fill="rgb(223,20,43)" fg:x="1138" fg:w="11"/><text x="76.6258%" y="334.50"></text></g><g><title>__getattr__ (omnigibson/utils/lazy_import_utils.py:18) (3 samples, 0.20%)</title><rect x="76.9128%" y="340" width="0.2013%" height="15" fill="rgb(229,81,49)" fg:x="1146" fg:w="3"/><text x="77.1628%" y="350.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py:696) (2 samples, 0.13%)</title><rect x="77.7852%" y="340" width="0.1342%" height="15" fill="rgb(236,28,36)" fg:x="1159" fg:w="2"/><text x="78.0352%" y="350.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py:706) (2 samples, 0.13%)</title><rect x="77.9866%" y="356" width="0.1342%" height="15" fill="rgb(249,185,26)" fg:x="1162" fg:w="2"/><text x="78.2366%" y="366.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py:721) (2 samples, 0.13%)</title><rect x="78.1208%" y="356" width="0.1342%" height="15" fill="rgb(249,174,33)" fg:x="1164" fg:w="2"/><text x="78.3708%" y="366.50"></text></g><g><title>contact_list (omnigibson/prims/rigid_prim.py:255) (20 samples, 1.34%)</title><rect x="77.1141%" y="308" width="1.3423%" height="15" fill="rgb(233,201,37)" fg:x="1149" fg:w="20"/><text x="77.3641%" y="318.50"></text></g><g><title>_dtype_from_pep3118 (numpy/core/_internal.py:652) (10 samples, 0.67%)</title><rect x="77.7852%" y="324" width="0.6711%" height="15" fill="rgb(221,78,26)" fg:x="1159" fg:w="10"/><text x="78.0352%" y="334.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py:706) (8 samples, 0.54%)</title><rect x="77.9195%" y="340" width="0.5369%" height="15" fill="rgb(250,127,30)" fg:x="1161" fg:w="8"/><text x="78.1695%" y="350.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/robots/manipulation_robot.py:285) (33 samples, 2.21%)</title><rect x="76.3087%" y="292" width="2.2148%" height="15" fill="rgb(230,49,44)" fg:x="1137" fg:w="33"/><text x="76.5587%" y="302.50">&lt;..</text></g><g><title>_find_gripper_contacts (omnigibson/robots/manipulation_robot.py:285) (34 samples, 2.28%)</title><rect x="76.3087%" y="276" width="2.2819%" height="15" fill="rgb(229,67,23)" fg:x="1137" fg:w="34"/><text x="76.5587%" y="286.50">_..</text></g><g><title>&lt;lambda&gt; (omnigibson/objects/controllable_object.py:139) (260 samples, 17.45%)</title><rect x="61.3423%" y="164" width="17.4497%" height="15" fill="rgb(249,83,47)" fg:x="914" fg:w="260"/><text x="61.5923%" y="174.50">&lt;lambda&gt; (omnigibson/object..</text></g><g><title>step (omnigibson/robots/robot_base.py:285) (160 samples, 10.74%)</title><rect x="68.0537%" y="180" width="10.7383%" height="15" fill="rgb(215,43,3)" fg:x="1014" fg:w="160"/><text x="68.3037%" y="190.50">step (omnigibson..</text></g><g><title>step (omnigibson/objects/controllable_object.py:354) (75 samples, 5.03%)</title><rect x="73.7584%" y="196" width="5.0336%" height="15" fill="rgb(238,154,13)" fg:x="1099" fg:w="75"/><text x="74.0084%" y="206.50">step (..</text></g><g><title>deploy_control (omnigibson/robots/manipulation_robot.py:337) (49 samples, 3.29%)</title><rect x="75.5034%" y="212" width="3.2886%" height="15" fill="rgb(219,56,2)" fg:x="1125" fg:w="49"/><text x="75.7534%" y="222.50">dep..</text></g><g><title>_handle_assisted_grasping (omnigibson/robots/manipulation_robot.py:1256) (37 samples, 2.48%)</title><rect x="76.3087%" y="228" width="2.4832%" height="15" fill="rgb(233,0,4)" fg:x="1137" fg:w="37"/><text x="76.5587%" y="238.50">_h..</text></g><g><title>_calculate_in_hand_object (omnigibson/robots/manipulation_robot.py:1279) (37 samples, 2.48%)</title><rect x="76.3087%" y="244" width="2.4832%" height="15" fill="rgb(235,30,7)" fg:x="1137" fg:w="37"/><text x="76.5587%" y="254.50">_c..</text></g><g><title>_calculate_in_hand_object_rigid (omnigibson/robots/manipulation_robot.py:788) (37 samples, 2.48%)</title><rect x="76.3087%" y="260" width="2.4832%" height="15" fill="rgb(250,79,13)" fg:x="1137" fg:w="37"/><text x="76.5587%" y="270.50">_c..</text></g><g><title>_find_gripper_contacts (omnigibson/robots/manipulation_robot.py:288) (3 samples, 0.20%)</title><rect x="78.5906%" y="276" width="0.2013%" height="15" fill="rgb(211,146,34)" fg:x="1171" fg:w="3"/><text x="78.8406%" y="286.50"></text></g><g><title>link_prim_paths (omnigibson/objects/object_base.py:284) (3 samples, 0.20%)</title><rect x="78.5906%" y="292" width="0.2013%" height="15" fill="rgb(228,22,38)" fg:x="1171" fg:w="3"/><text x="78.8406%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/objects/object_base.py:284) (3 samples, 0.20%)</title><rect x="78.5906%" y="308" width="0.2013%" height="15" fill="rgb(235,168,5)" fg:x="1171" fg:w="3"/><text x="78.8406%" y="318.50"></text></g><g><title>prim_path (omnigibson/prims/prim_base.py:147) (2 samples, 0.13%)</title><rect x="78.6577%" y="324" width="0.1342%" height="15" fill="rgb(221,155,16)" fg:x="1172" fg:w="2"/><text x="78.9077%" y="334.50"></text></g><g><title>stage_changed_notice (viewport/widget.py:250) (89 samples, 5.97%)</title><rect x="78.7919%" y="180" width="5.9732%" height="15" fill="rgb(215,215,53)" fg:x="1174" fg:w="89"/><text x="79.0419%" y="190.50">stage_ch..</text></g><g><title>stage_changed_notice (viewport/widget.py:251) (19 samples, 1.28%)</title><rect x="84.7651%" y="180" width="1.2752%" height="15" fill="rgb(223,4,10)" fg:x="1263" fg:w="19"/><text x="85.0151%" y="190.50"></text></g><g><title>stage_changed_notice (viewport/widget.py:256) (9 samples, 0.60%)</title><rect x="86.0403%" y="180" width="0.6040%" height="15" fill="rgb(234,103,6)" fg:x="1282" fg:w="9"/><text x="86.2903%" y="190.50"></text></g><g><title>stage_changed_notice (viewport/widget.py:258) (10 samples, 0.67%)</title><rect x="86.6443%" y="180" width="0.6711%" height="15" fill="rgb(227,97,0)" fg:x="1291" fg:w="10"/><text x="86.8943%" y="190.50"></text></g><g><title>&lt;lambda&gt; (viewport/widget.py:356) (178 samples, 11.95%)</title><rect x="78.7919%" y="164" width="11.9463%" height="15" fill="rgb(234,150,53)" fg:x="1174" fg:w="178"/><text x="79.0419%" y="174.50">&lt;lambda&gt; (viewport..</text></g><g><title>stage_changed_notice (viewport/widget.py:260) (51 samples, 3.42%)</title><rect x="87.3154%" y="180" width="3.4228%" height="15" fill="rgb(228,201,54)" fg:x="1301" fg:w="51"/><text x="87.5654%" y="190.50">sta..</text></g><g><title>invoke (Trace/__init__.py:76) (3 samples, 0.20%)</title><rect x="90.7383%" y="164" width="0.2013%" height="15" fill="rgb(222,22,37)" fg:x="1352" fg:w="3"/><text x="90.9883%" y="174.50"></text></g><g><title>helper (contextlib.py:281) (2 samples, 0.13%)</title><rect x="90.8054%" y="180" width="0.1342%" height="15" fill="rgb(237,53,32)" fg:x="1353" fg:w="2"/><text x="91.0554%" y="190.50"></text></g><g><title>__init__ (contextlib.py:103) (2 samples, 0.13%)</title><rect x="90.8054%" y="196" width="0.1342%" height="15" fill="rgb(233,25,53)" fg:x="1353" fg:w="2"/><text x="91.0554%" y="206.50"></text></g><g><title>__on_objects_changed (stage/stage_model.py:473) (10 samples, 0.67%)</title><rect x="90.9396%" y="180" width="0.6711%" height="15" fill="rgb(210,40,34)" fg:x="1355" fg:w="10"/><text x="91.1896%" y="190.50"></text></g><g><title>__on_objects_changed (stage/stage_model.py:474) (4 samples, 0.27%)</title><rect x="91.6107%" y="180" width="0.2685%" height="15" fill="rgb(241,220,44)" fg:x="1365" fg:w="4"/><text x="91.8607%" y="190.50"></text></g><g><title>__on_objects_changed (stage/stage_model.py:475) (17 samples, 1.14%)</title><rect x="91.8792%" y="180" width="1.1409%" height="15" fill="rgb(235,28,35)" fg:x="1369" fg:w="17"/><text x="92.1292%" y="190.50"></text></g><g><title>_on_usd_changed (core/utils/usd_watch.py:147) (5 samples, 0.34%)</title><rect x="93.0872%" y="180" width="0.3356%" height="15" fill="rgb(210,56,17)" fg:x="1387" fg:w="5"/><text x="93.3372%" y="190.50"></text></g><g><title>_on_usd_changed (core/utils/usd_watch.py:148) (12 samples, 0.81%)</title><rect x="93.4228%" y="180" width="0.8054%" height="15" fill="rgb(224,130,29)" fg:x="1392" fg:w="12"/><text x="93.6728%" y="190.50"></text></g><g><title>_on_usd_changed (usd/_impl/utils.py:1068) (9 samples, 0.60%)</title><rect x="94.2953%" y="180" width="0.6040%" height="15" fill="rgb(235,212,8)" fg:x="1405" fg:w="9"/><text x="94.5453%" y="190.50"></text></g><g><title>step (omnigibson/simulator.py:773) (1,444 samples, 96.91%)</title><rect x="0.5369%" y="116" width="96.9128%" height="15" fill="rgb(223,33,50)" fg:x="8" fg:w="1444"/><text x="0.7869%" y="126.50">step (omnigibson/simulator.py:773)</text></g><g><title>step (core/simulation_context/simulation_context.py:704) (1,442 samples, 96.78%)</title><rect x="0.6711%" y="132" width="96.7785%" height="15" fill="rgb(219,149,13)" fg:x="10" fg:w="1442"/><text x="0.9211%" y="142.50">step (core/simulation_context/simulation_context.py:704)</text></g><g><title>_step (core/physics_context/physics_context.py:574) (1,436 samples, 96.38%)</title><rect x="1.0738%" y="148" width="96.3758%" height="15" fill="rgb(250,156,29)" fg:x="16" fg:w="1436"/><text x="1.3238%" y="158.50">_step (core/physics_context/physics_context.py:574)</text></g><g><title>invoke (Trace/__init__.py:77) (97 samples, 6.51%)</title><rect x="90.9396%" y="164" width="6.5101%" height="15" fill="rgb(216,193,19)" fg:x="1355" fg:w="97"/><text x="91.1896%" y="174.50">invoke (T..</text></g><g><title>_on_usd_changed (usd/_impl/utils.py:1069) (38 samples, 2.55%)</title><rect x="94.8993%" y="180" width="2.5503%" height="15" fill="rgb(216,135,14)" fg:x="1414" fg:w="38"/><text x="95.1493%" y="190.50">_o..</text></g><g><title>step (omnigibson/envs/vec_env_base.py:16) (1,448 samples, 97.18%)</title><rect x="0.4027%" y="100" width="97.1812%" height="15" fill="rgb(241,47,5)" fg:x="6" fg:w="1448"/><text x="0.6527%" y="110.50">step (omnigibson/envs/vec_env_base.py:16)</text></g><g><title>step (omnigibson/simulator.py:776) (2 samples, 0.13%)</title><rect x="97.4497%" y="116" width="0.1342%" height="15" fill="rgb(233,42,35)" fg:x="1452" fg:w="2"/><text x="97.6997%" y="126.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/robot_base.py:330) (3 samples, 0.20%)</title><rect x="97.7181%" y="260" width="0.2013%" height="15" fill="rgb(231,13,6)" fg:x="1456" fg:w="3"/><text x="97.9681%" y="270.50"></text></g><g><title>get_rpy (omnigibson/prims/xform_prim.py:234) (3 samples, 0.20%)</title><rect x="97.7181%" y="276" width="0.2013%" height="15" fill="rgb(207,181,40)" fg:x="1456" fg:w="3"/><text x="97.9681%" y="286.50"></text></g><g><title>quat2euler (omnigibson/utils/transform_utils.py:534) (2 samples, 0.13%)</title><rect x="97.7852%" y="292" width="0.1342%" height="15" fill="rgb(254,173,49)" fg:x="1457" fg:w="2"/><text x="98.0352%" y="302.50"></text></g><g><title>get_2d_orientation (omnigibson/prims/xform_prim.py:241) (3 samples, 0.20%)</title><rect x="97.9195%" y="276" width="0.2013%" height="15" fill="rgb(221,1,38)" fg:x="1459" fg:w="3"/><text x="98.1695%" y="286.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/robot_base.py:331) (4 samples, 0.27%)</title><rect x="97.9195%" y="260" width="0.2685%" height="15" fill="rgb(206,124,46)" fg:x="1459" fg:w="4"/><text x="98.1695%" y="270.50"></text></g><g><title>_rigid_prim_view (omnigibson/prims/rigid_prim.py:354) (3 samples, 0.20%)</title><rect x="98.2550%" y="308" width="0.2013%" height="15" fill="rgb(249,21,11)" fg:x="1464" fg:w="3"/><text x="98.5050%" y="318.50"></text></g><g><title>kinematic_only (omnigibson/prims/rigid_prim.py:498) (3 samples, 0.20%)</title><rect x="98.2550%" y="324" width="0.2013%" height="15" fill="rgb(222,201,40)" fg:x="1464" fg:w="3"/><text x="98.5050%" y="334.50"></text></g><g><title>get_attribute (omnigibson/prims/prim_base.py:222) (3 samples, 0.20%)</title><rect x="98.2550%" y="340" width="0.2013%" height="15" fill="rgb(235,61,29)" fg:x="1464" fg:w="3"/><text x="98.5050%" y="350.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/active_camera_robot.py:35) (13 samples, 0.87%)</title><rect x="97.6510%" y="244" width="0.8725%" height="15" fill="rgb(219,207,3)" fg:x="1455" fg:w="13"/><text x="97.9010%" y="254.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/robot_base.py:344) (4 samples, 0.27%)</title><rect x="98.2550%" y="260" width="0.2685%" height="15" fill="rgb(222,56,46)" fg:x="1464" fg:w="4"/><text x="98.5050%" y="270.50"></text></g><g><title>get_linear_velocity (omnigibson/prims/entity_prim.py:889) (4 samples, 0.27%)</title><rect x="98.2550%" y="276" width="0.2685%" height="15" fill="rgb(239,76,54)" fg:x="1464" fg:w="4"/><text x="98.5050%" y="286.50"></text></g><g><title>get_linear_velocity (omnigibson/prims/rigid_prim.py:278) (4 samples, 0.27%)</title><rect x="98.2550%" y="292" width="0.2685%" height="15" fill="rgb(231,124,27)" fg:x="1464" fg:w="4"/><text x="98.5050%" y="302.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/locomotion_robot.py:40) (14 samples, 0.94%)</title><rect x="97.6510%" y="228" width="0.9396%" height="15" fill="rgb(249,195,6)" fg:x="1455" fg:w="14"/><text x="97.9010%" y="238.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/locomotion_robot.py:42) (2 samples, 0.13%)</title><rect x="98.5906%" y="228" width="0.1342%" height="15" fill="rgb(237,174,47)" fg:x="1469" fg:w="2"/><text x="98.8406%" y="238.50"></text></g><g><title>get_joint_positions (omnigibson/prims/entity_prim.py:832) (2 samples, 0.13%)</title><rect x="98.5906%" y="244" width="0.1342%" height="15" fill="rgb(206,201,31)" fg:x="1469" fg:w="2"/><text x="98.8406%" y="254.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/two_wheel_robot.py:68) (17 samples, 1.14%)</title><rect x="97.6510%" y="212" width="1.1409%" height="15" fill="rgb(231,57,52)" fg:x="1455" fg:w="17"/><text x="97.9010%" y="222.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/two_wheel_robot.py:73) (4 samples, 0.27%)</title><rect x="98.7919%" y="212" width="0.2685%" height="15" fill="rgb(248,177,22)" fg:x="1472" fg:w="4"/><text x="99.0419%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/robots/two_wheel_robot.py:73) (4 samples, 0.27%)</title><rect x="98.7919%" y="228" width="0.2685%" height="15" fill="rgb(215,211,37)" fg:x="1472" fg:w="4"/><text x="99.0419%" y="238.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/manipulation_robot.py:406) (23 samples, 1.54%)</title><rect x="97.6510%" y="196" width="1.5436%" height="15" fill="rgb(241,128,51)" fg:x="1455" fg:w="23"/><text x="97.9010%" y="206.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/manipulation_robot.py:420) (2 samples, 0.13%)</title><rect x="99.2617%" y="196" width="0.1342%" height="15" fill="rgb(227,165,31)" fg:x="1479" fg:w="2"/><text x="99.5117%" y="206.50"></text></g><g><title>get_eef_orientation (omnigibson/robots/manipulation_robot.py:699) (2 samples, 0.13%)</title><rect x="99.2617%" y="212" width="0.1342%" height="15" fill="rgb(228,167,24)" fg:x="1479" fg:w="2"/><text x="99.5117%" y="222.50"></text></g><g><title>get_orientation (omnigibson/prims/xform_prim.py:225) (2 samples, 0.13%)</title><rect x="99.2617%" y="228" width="0.1342%" height="15" fill="rgb(228,143,12)" fg:x="1479" fg:w="2"/><text x="99.5117%" y="238.50"></text></g><g><title>get_relative_eef_pose (omnigibson/robots/manipulation_robot.py:713) (3 samples, 0.20%)</title><rect x="99.5302%" y="228" width="0.2013%" height="15" fill="rgb(249,149,8)" fg:x="1483" fg:w="3"/><text x="99.7802%" y="238.50"></text></g><g><title>_get_proprioception_dict (omnigibson/robots/fetch.py:289) (33 samples, 2.21%)</title><rect x="97.6510%" y="180" width="2.2148%" height="15" fill="rgb(243,35,44)" fg:x="1455" fg:w="33"/><text x="97.9010%" y="190.50">_..</text></g><g><title>_get_proprioception_dict (omnigibson/robots/manipulation_robot.py:422) (6 samples, 0.40%)</title><rect x="99.4631%" y="196" width="0.4027%" height="15" fill="rgb(246,89,9)" fg:x="1482" fg:w="6"/><text x="99.7131%" y="206.50"></text></g><g><title>get_relative_eef_orientation (omnigibson/robots/manipulation_robot.py:741) (6 samples, 0.40%)</title><rect x="99.4631%" y="212" width="0.4027%" height="15" fill="rgb(233,213,13)" fg:x="1482" fg:w="6"/><text x="99.7131%" y="222.50"></text></g><g><title>get_obs (omnigibson/envs/env_base.py:473) (35 samples, 2.35%)</title><rect x="97.5839%" y="132" width="2.3490%" height="15" fill="rgb(233,141,41)" fg:x="1454" fg:w="35"/><text x="97.8339%" y="142.50">g..</text></g><g><title>get_obs (omnigibson/robots/robot_base.py:308) (34 samples, 2.28%)</title><rect x="97.6510%" y="148" width="2.2819%" height="15" fill="rgb(239,167,4)" fg:x="1455" fg:w="34"/><text x="97.9010%" y="158.50">g..</text></g><g><title>get_proprioception (omnigibson/robots/robot_base.py:318) (34 samples, 2.28%)</title><rect x="97.6510%" y="164" width="2.2819%" height="15" fill="rgb(209,217,16)" fg:x="1455" fg:w="34"/><text x="97.9010%" y="174.50">g..</text></g><g><title>all (1,490 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="1490"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (test_multiple_envs.py:77) (1,490 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="1490"/><text x="0.2500%" y="78.50">&lt;module&gt; (test_multiple_envs.py:77)</text></g><g><title>main (test_multiple_envs.py:56) (1,489 samples, 99.93%)</title><rect x="0.0671%" y="84" width="99.9329%" height="15" fill="rgb(230,90,52)" fg:x="1" fg:w="1489"/><text x="0.3171%" y="94.50">main (test_multiple_envs.py:56)</text></g><g><title>step (omnigibson/envs/vec_env_base.py:18) (36 samples, 2.42%)</title><rect x="97.5839%" y="100" width="2.4161%" height="15" fill="rgb(252,106,19)" fg:x="1454" fg:w="36"/><text x="97.8339%" y="110.50">st..</text></g><g><title>_post_step (omnigibson/envs/env_base.py:542) (36 samples, 2.42%)</title><rect x="97.5839%" y="116" width="2.4161%" height="15" fill="rgb(206,74,20)" fg:x="1454" fg:w="36"/><text x="97.8339%" y="126.50">_p..</text></g></svg></svg>
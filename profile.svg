<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="458" onload="init(evt)" viewBox="0 0 1200 458" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="458" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -p 1707072</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="447.00"> </text><svg id="frames" x="10" width="1180" total_samples="284893"><g><title>_bootstrap (threading.py:973) (227,916 samples, 80.00%)</title><rect x="0.0000%" y="68" width="80.0006%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="227916"/><text x="0.2500%" y="78.50">_bootstrap (threading.py:973)</text></g><g><title>_bootstrap_inner (threading.py:1016) (227,916 samples, 80.00%)</title><rect x="0.0000%" y="84" width="80.0006%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="227916"/><text x="0.2500%" y="94.50">_bootstrap_inner (threading.py:1016)</text></g><g><title>run (threading.py:953) (227,916 samples, 80.00%)</title><rect x="0.0000%" y="100" width="80.0006%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="227916"/><text x="0.2500%" y="110.50">run (threading.py:953)</text></g><g><title>_worker (concurrent/futures/thread.py:81) (227,916 samples, 80.00%)</title><rect x="0.0000%" y="116" width="80.0006%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="227916"/><text x="0.2500%" y="126.50">_worker (concurrent/futures/thread.py:81)</text></g><g><title>step (omnigibson/simulator.py:1084) (436 samples, 0.15%)</title><rect x="80.0090%" y="244" width="0.1530%" height="15" fill="rgb(208,68,35)" fg:x="227940" fg:w="436"/><text x="80.2590%" y="254.50"></text></g><g><title>step (core/simulation_context/simulation_context.py:699) (435 samples, 0.15%)</title><rect x="80.0093%" y="260" width="0.1527%" height="15" fill="rgb(232,128,0)" fg:x="227941" fg:w="435"/><text x="80.2593%" y="270.50"></text></g><g><title>aabb (omnigibson/prims/geom_prim.py:153) (4,851 samples, 1.70%)</title><rect x="80.1645%" y="308" width="1.7027%" height="15" fill="rgb(207,160,47)" fg:x="228383" fg:w="4851"/><text x="80.4145%" y="318.50"></text></g><g><title>points (omnigibson/prims/geom_prim.py:131) (4,851 samples, 1.70%)</title><rect x="80.1645%" y="324" width="1.7027%" height="15" fill="rgb(228,23,34)" fg:x="228383" fg:w="4851"/><text x="80.4145%" y="334.50"></text></g><g><title>_non_physics_step (omnigibson/simulator.py:949) (4,861 samples, 1.71%)</title><rect x="80.1624%" y="260" width="1.7063%" height="15" fill="rgb(218,30,26)" fg:x="228377" fg:w="4861"/><text x="80.4124%" y="270.50"></text></g><g><title>update (omnigibson/systems/macro_particle_system.py:425) (4,861 samples, 1.71%)</title><rect x="80.1624%" y="276" width="1.7063%" height="15" fill="rgb(220,122,19)" fg:x="228377" fg:w="4861"/><text x="80.4124%" y="286.50"></text></g><g><title>aabb_extent (omnigibson/prims/geom_prim.py:169) (4,861 samples, 1.71%)</title><rect x="80.1624%" y="292" width="1.7063%" height="15" fill="rgb(250,228,42)" fg:x="228377" fg:w="4861"/><text x="80.4124%" y="302.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:156) (346 samples, 0.12%)</title><rect x="82.1873%" y="372" width="0.1214%" height="15" fill="rgb(240,193,28)" fg:x="234146" fg:w="346"/><text x="82.4373%" y="382.50"></text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:1201) (1,339 samples, 0.47%)</title><rect x="81.8760%" y="292" width="0.4700%" height="15" fill="rgb(216,20,37)" fg:x="233259" fg:w="1339"/><text x="82.1260%" y="302.50"></text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:665) (1,339 samples, 0.47%)</title><rect x="81.8760%" y="308" width="0.4700%" height="15" fill="rgb(206,188,39)" fg:x="233259" fg:w="1339"/><text x="82.1260%" y="318.50"></text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:1251) (1,339 samples, 0.47%)</title><rect x="81.8760%" y="324" width="0.4700%" height="15" fill="rgb(217,207,13)" fg:x="233259" fg:w="1339"/><text x="82.1260%" y="334.50"></text></g><g><title>_apply_particles_in_projection_volume (omnigibson/object_states/particle_modifier.py:1364) (1,336 samples, 0.47%)</title><rect x="81.8771%" y="340" width="0.4689%" height="15" fill="rgb(231,73,38)" fg:x="233262" fg:w="1336"/><text x="82.1271%" y="350.50"></text></g><g><title>generate_particles (omnigibson/systems/micro_particle_system.py:960) (1,336 samples, 0.47%)</title><rect x="81.8771%" y="356" width="0.4689%" height="15" fill="rgb(225,20,46)" fg:x="233262" fg:w="1336"/><text x="82.1271%" y="366.50"></text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:659) (690 samples, 0.24%)</title><rect x="82.3460%" y="292" width="0.2422%" height="15" fill="rgb(210,31,41)" fg:x="234598" fg:w="690"/><text x="82.5960%" y="302.50"></text></g><g><title>check_conditions_for_system (omnigibson/object_states/particle_modifier.py:639) (690 samples, 0.24%)</title><rect x="82.3460%" y="308" width="0.2422%" height="15" fill="rgb(221,200,47)" fg:x="234598" fg:w="690"/><text x="82.5960%" y="318.50"></text></g><g><title>&lt;genexpr&gt; (omnigibson/object_states/particle_modifier.py:639) (690 samples, 0.24%)</title><rect x="82.3460%" y="324" width="0.2422%" height="15" fill="rgb(226,26,5)" fg:x="234598" fg:w="690"/><text x="82.5960%" y="334.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/object_states/particle_modifier.py:917) (690 samples, 0.24%)</title><rect x="82.3460%" y="340" width="0.2422%" height="15" fill="rgb(249,33,26)" fg:x="234598" fg:w="690"/><text x="82.5960%" y="350.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:734) (690 samples, 0.24%)</title><rect x="82.3460%" y="356" width="0.2422%" height="15" fill="rgb(235,183,28)" fg:x="234598" fg:w="690"/><text x="82.5960%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/systems/micro_particle_system.py:734) (690 samples, 0.24%)</title><rect x="82.3460%" y="372" width="0.2422%" height="15" fill="rgb(221,5,38)" fg:x="234598" fg:w="690"/><text x="82.5960%" y="382.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (690 samples, 0.24%)</title><rect x="82.3460%" y="388" width="0.2422%" height="15" fill="rgb(247,18,42)" fg:x="234598" fg:w="690"/><text x="82.5960%" y="398.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (690 samples, 0.24%)</title><rect x="82.3460%" y="404" width="0.2422%" height="15" fill="rgb(241,131,45)" fg:x="234598" fg:w="690"/><text x="82.5960%" y="414.50"></text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:877) (1,477 samples, 0.52%)</title><rect x="82.5882%" y="308" width="0.5184%" height="15" fill="rgb(249,31,29)" fg:x="235288" fg:w="1477"/><text x="82.8382%" y="318.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:734) (1,477 samples, 0.52%)</title><rect x="82.5882%" y="324" width="0.5184%" height="15" fill="rgb(225,111,53)" fg:x="235288" fg:w="1477"/><text x="82.8382%" y="334.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/systems/micro_particle_system.py:734) (1,477 samples, 0.52%)</title><rect x="82.5882%" y="340" width="0.5184%" height="15" fill="rgb(238,160,17)" fg:x="235288" fg:w="1477"/><text x="82.8382%" y="350.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (1,477 samples, 0.52%)</title><rect x="82.5882%" y="356" width="0.5184%" height="15" fill="rgb(214,148,48)" fg:x="235288" fg:w="1477"/><text x="82.8382%" y="366.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (1,477 samples, 0.52%)</title><rect x="82.5882%" y="372" width="0.5184%" height="15" fill="rgb(232,36,49)" fg:x="235288" fg:w="1477"/><text x="82.8382%" y="382.50"></text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:893) (798 samples, 0.28%)</title><rect x="83.1066%" y="308" width="0.2801%" height="15" fill="rgb(209,103,24)" fg:x="236765" fg:w="798"/><text x="83.3566%" y="318.50"></text></g><g><title>get_particles_position_orientation (omnigibson/systems/micro_particle_system.py:1195) (792 samples, 0.28%)</title><rect x="83.1087%" y="324" width="0.2780%" height="15" fill="rgb(229,88,8)" fg:x="236771" fg:w="792"/><text x="83.3587%" y="334.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (680 samples, 0.24%)</title><rect x="83.1481%" y="340" width="0.2387%" height="15" fill="rgb(213,181,19)" fg:x="236883" fg:w="680"/><text x="83.3981%" y="350.50"></text></g><g><title>_get_value (omnigibson/object_states/contact_particles.py:60) (972 samples, 0.34%)</title><rect x="83.3906%" y="356" width="0.3412%" height="15" fill="rgb(254,191,54)" fg:x="237574" fg:w="972"/><text x="83.6406%" y="366.50"></text></g><g><title>get_particles_position_orientation (omnigibson/systems/micro_particle_system.py:1195) (972 samples, 0.34%)</title><rect x="83.3906%" y="372" width="0.3412%" height="15" fill="rgb(241,83,37)" fg:x="237574" fg:w="972"/><text x="83.6406%" y="382.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (825 samples, 0.29%)</title><rect x="83.4422%" y="388" width="0.2896%" height="15" fill="rgb(233,36,39)" fg:x="237721" fg:w="825"/><text x="83.6922%" y="398.50"></text></g><g><title>update_cache (omnigibson/object_states/object_state_base.py:195) (985 samples, 0.35%)</title><rect x="83.3867%" y="340" width="0.3457%" height="15" fill="rgb(226,3,54)" fg:x="237563" fg:w="985"/><text x="83.6367%" y="350.50"></text></g><g><title>_non_physics_step (omnigibson/simulator.py:963) (5,308 samples, 1.86%)</title><rect x="81.8697%" y="260" width="1.8632%" height="15" fill="rgb(245,192,40)" fg:x="233241" fg:w="5308"/><text x="82.1197%" y="270.50">_..</text></g><g><title>update (omnigibson/object_states/update_state_mixin.py:15) (5,308 samples, 1.86%)</title><rect x="81.8697%" y="276" width="1.8632%" height="15" fill="rgb(238,167,29)" fg:x="233241" fg:w="5308"/><text x="82.1197%" y="286.50">u..</text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:665) (3,261 samples, 1.14%)</title><rect x="82.5882%" y="292" width="1.1446%" height="15" fill="rgb(232,182,51)" fg:x="235288" fg:w="3261"/><text x="82.8382%" y="302.50"></text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:895) (986 samples, 0.35%)</title><rect x="83.3867%" y="308" width="0.3461%" height="15" fill="rgb(231,60,39)" fg:x="237563" fg:w="986"/><text x="83.6367%" y="318.50"></text></g><g><title>get_value (omnigibson/object_states/object_state_base.py:325) (986 samples, 0.35%)</title><rect x="83.3867%" y="324" width="0.3461%" height="15" fill="rgb(208,69,12)" fg:x="237563" fg:w="986"/><text x="83.6367%" y="334.50"></text></g><g><title>step (omnigibson/envs/env_base.py:619) (10,610 samples, 3.72%)</title><rect x="80.0090%" y="228" width="3.7242%" height="15" fill="rgb(235,93,37)" fg:x="227940" fg:w="10610"/><text x="80.2590%" y="238.50">step..</text></g><g><title>step (omnigibson/simulator.py:1090) (10,174 samples, 3.57%)</title><rect x="80.1620%" y="244" width="3.5712%" height="15" fill="rgb(213,116,39)" fg:x="228376" fg:w="10174"/><text x="80.4120%" y="254.50">step..</text></g><g><title>test_wipe (test_symbolic_primitives.py:230) (10,617 samples, 3.73%)</title><rect x="80.0086%" y="212" width="3.7267%" height="15" fill="rgb(222,207,29)" fg:x="227939" fg:w="10617"/><text x="80.2586%" y="222.50">test..</text></g><g><title>step (omnigibson/simulator.py:1084) (706 samples, 0.25%)</title><rect x="83.7371%" y="244" width="0.2478%" height="15" fill="rgb(206,96,30)" fg:x="238561" fg:w="706"/><text x="83.9871%" y="254.50"></text></g><g><title>step (core/simulation_context/simulation_context.py:699) (704 samples, 0.25%)</title><rect x="83.7378%" y="260" width="0.2471%" height="15" fill="rgb(218,138,4)" fg:x="238563" fg:w="704"/><text x="83.9878%" y="270.50"></text></g><g><title>aabb (omnigibson/prims/geom_prim.py:153) (6,709 samples, 2.35%)</title><rect x="83.9880%" y="308" width="2.3549%" height="15" fill="rgb(250,191,14)" fg:x="239276" fg:w="6709"/><text x="84.2380%" y="318.50">a..</text></g><g><title>points (omnigibson/prims/geom_prim.py:131) (6,709 samples, 2.35%)</title><rect x="83.9880%" y="324" width="2.3549%" height="15" fill="rgb(239,60,40)" fg:x="239276" fg:w="6709"/><text x="84.2380%" y="334.50">p..</text></g><g><title>_non_physics_step (omnigibson/simulator.py:949) (6,721 samples, 2.36%)</title><rect x="83.9852%" y="260" width="2.3591%" height="15" fill="rgb(206,27,48)" fg:x="239268" fg:w="6721"/><text x="84.2352%" y="270.50">_..</text></g><g><title>update (omnigibson/systems/macro_particle_system.py:425) (6,721 samples, 2.36%)</title><rect x="83.9852%" y="276" width="2.3591%" height="15" fill="rgb(225,35,8)" fg:x="239268" fg:w="6721"/><text x="84.2352%" y="286.50">u..</text></g><g><title>aabb_extent (omnigibson/prims/geom_prim.py:169) (6,721 samples, 2.36%)</title><rect x="83.9852%" y="292" width="2.3591%" height="15" fill="rgb(250,213,24)" fg:x="239268" fg:w="6721"/><text x="84.2352%" y="302.50">a..</text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:146) (434 samples, 0.15%)</title><rect x="86.3552%" y="372" width="0.1523%" height="15" fill="rgb(247,123,22)" fg:x="246020" fg:w="434"/><text x="86.6052%" y="382.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (434 samples, 0.15%)</title><rect x="86.3552%" y="388" width="0.1523%" height="15" fill="rgb(231,138,38)" fg:x="246020" fg:w="434"/><text x="86.6052%" y="398.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:149) (387 samples, 0.14%)</title><rect x="86.5830%" y="372" width="0.1358%" height="15" fill="rgb(231,145,46)" fg:x="246669" fg:w="387"/><text x="86.8330%" y="382.50"></text></g><g><title>particle_velocities (omnigibson/systems/micro_particle_system.py:275) (387 samples, 0.14%)</title><rect x="86.5830%" y="388" width="0.1358%" height="15" fill="rgb(251,118,11)" fg:x="246669" fg:w="387"/><text x="86.8330%" y="398.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:151) (422 samples, 0.15%)</title><rect x="86.7189%" y="372" width="0.1481%" height="15" fill="rgb(217,147,25)" fg:x="247056" fg:w="422"/><text x="86.9689%" y="382.50"></text></g><g><title>particle_scales (omnigibson/systems/micro_particle_system.py:298) (379 samples, 0.13%)</title><rect x="86.8793%" y="388" width="0.1330%" height="15" fill="rgb(247,81,37)" fg:x="247513" fg:w="379"/><text x="87.1293%" y="398.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:156) (633 samples, 0.22%)</title><rect x="86.8789%" y="372" width="0.2222%" height="15" fill="rgb(209,12,38)" fg:x="247512" fg:w="633"/><text x="87.1289%" y="382.50"></text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:1201) (2,372 samples, 0.83%)</title><rect x="86.3521%" y="292" width="0.8326%" height="15" fill="rgb(227,1,9)" fg:x="246011" fg:w="2372"/><text x="86.6021%" y="302.50"></text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:665) (2,371 samples, 0.83%)</title><rect x="86.3524%" y="308" width="0.8322%" height="15" fill="rgb(248,47,43)" fg:x="246012" fg:w="2371"/><text x="86.6024%" y="318.50"></text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:1251) (2,371 samples, 0.83%)</title><rect x="86.3524%" y="324" width="0.8322%" height="15" fill="rgb(221,10,30)" fg:x="246012" fg:w="2371"/><text x="86.6024%" y="334.50"></text></g><g><title>_apply_particles_in_projection_volume (omnigibson/object_states/particle_modifier.py:1364) (2,371 samples, 0.83%)</title><rect x="86.3524%" y="340" width="0.8322%" height="15" fill="rgb(210,229,1)" fg:x="246012" fg:w="2371"/><text x="86.6024%" y="350.50"></text></g><g><title>generate_particles (omnigibson/systems/micro_particle_system.py:960) (2,371 samples, 0.83%)</title><rect x="86.3524%" y="356" width="0.8322%" height="15" fill="rgb(222,148,37)" fg:x="246012" fg:w="2371"/><text x="86.6024%" y="366.50"></text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:659) (1,425 samples, 0.50%)</title><rect x="87.1847%" y="292" width="0.5002%" height="15" fill="rgb(234,67,33)" fg:x="248383" fg:w="1425"/><text x="87.4347%" y="302.50"></text></g><g><title>check_conditions_for_system (omnigibson/object_states/particle_modifier.py:639) (1,425 samples, 0.50%)</title><rect x="87.1847%" y="308" width="0.5002%" height="15" fill="rgb(247,98,35)" fg:x="248383" fg:w="1425"/><text x="87.4347%" y="318.50"></text></g><g><title>&lt;genexpr&gt; (omnigibson/object_states/particle_modifier.py:639) (1,425 samples, 0.50%)</title><rect x="87.1847%" y="324" width="0.5002%" height="15" fill="rgb(247,138,52)" fg:x="248383" fg:w="1425"/><text x="87.4347%" y="334.50"></text></g><g><title>&lt;lambda&gt; (omnigibson/object_states/particle_modifier.py:917) (1,425 samples, 0.50%)</title><rect x="87.1847%" y="340" width="0.5002%" height="15" fill="rgb(213,79,30)" fg:x="248383" fg:w="1425"/><text x="87.4347%" y="350.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:734) (1,425 samples, 0.50%)</title><rect x="87.1847%" y="356" width="0.5002%" height="15" fill="rgb(246,177,23)" fg:x="248383" fg:w="1425"/><text x="87.4347%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/systems/micro_particle_system.py:734) (1,425 samples, 0.50%)</title><rect x="87.1847%" y="372" width="0.5002%" height="15" fill="rgb(230,62,27)" fg:x="248383" fg:w="1425"/><text x="87.4347%" y="382.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (1,425 samples, 0.50%)</title><rect x="87.1847%" y="388" width="0.5002%" height="15" fill="rgb(216,154,8)" fg:x="248383" fg:w="1425"/><text x="87.4347%" y="398.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (1,424 samples, 0.50%)</title><rect x="87.1850%" y="404" width="0.4998%" height="15" fill="rgb(244,35,45)" fg:x="248384" fg:w="1424"/><text x="87.4350%" y="414.50"></text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:877) (1,509 samples, 0.53%)</title><rect x="87.6849%" y="308" width="0.5297%" height="15" fill="rgb(251,115,12)" fg:x="249808" fg:w="1509"/><text x="87.9349%" y="318.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:734) (1,509 samples, 0.53%)</title><rect x="87.6849%" y="324" width="0.5297%" height="15" fill="rgb(240,54,50)" fg:x="249808" fg:w="1509"/><text x="87.9349%" y="334.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/systems/micro_particle_system.py:734) (1,509 samples, 0.53%)</title><rect x="87.6849%" y="340" width="0.5297%" height="15" fill="rgb(233,84,52)" fg:x="249808" fg:w="1509"/><text x="87.9349%" y="350.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (1,509 samples, 0.53%)</title><rect x="87.6849%" y="356" width="0.5297%" height="15" fill="rgb(207,117,47)" fg:x="249808" fg:w="1509"/><text x="87.9349%" y="366.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (1,508 samples, 0.53%)</title><rect x="87.6852%" y="372" width="0.5293%" height="15" fill="rgb(249,43,39)" fg:x="249809" fg:w="1508"/><text x="87.9352%" y="382.50"></text></g><g><title>_non_physics_step (omnigibson/simulator.py:963) (6,849 samples, 2.40%)</title><rect x="86.3458%" y="260" width="2.4041%" height="15" fill="rgb(209,38,44)" fg:x="245993" fg:w="6849"/><text x="86.5958%" y="270.50">_n..</text></g><g><title>update (omnigibson/object_states/update_state_mixin.py:15) (6,849 samples, 2.40%)</title><rect x="86.3458%" y="276" width="2.4041%" height="15" fill="rgb(236,212,23)" fg:x="245993" fg:w="6849"/><text x="86.5958%" y="286.50">up..</text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:665) (3,034 samples, 1.06%)</title><rect x="87.6849%" y="292" width="1.0650%" height="15" fill="rgb(242,79,21)" fg:x="249808" fg:w="3034"/><text x="87.9349%" y="302.50"></text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:893) (1,516 samples, 0.53%)</title><rect x="88.2177%" y="308" width="0.5321%" height="15" fill="rgb(211,96,35)" fg:x="251326" fg:w="1516"/><text x="88.4677%" y="318.50"></text></g><g><title>get_particles_position_orientation (omnigibson/systems/micro_particle_system.py:1195) (1,505 samples, 0.53%)</title><rect x="88.2215%" y="324" width="0.5283%" height="15" fill="rgb(253,215,40)" fg:x="251337" fg:w="1505"/><text x="88.4715%" y="334.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (1,349 samples, 0.47%)</title><rect x="88.2763%" y="340" width="0.4735%" height="15" fill="rgb(211,81,21)" fg:x="251493" fg:w="1349"/><text x="88.5263%" y="350.50"></text></g><g><title>step (omnigibson/envs/env_base.py:619) (14,284 samples, 5.01%)</title><rect x="83.7364%" y="228" width="5.0138%" height="15" fill="rgb(208,190,38)" fg:x="238559" fg:w="14284"/><text x="83.9864%" y="238.50">step (..</text></g><g><title>step (omnigibson/simulator.py:1090) (13,576 samples, 4.77%)</title><rect x="83.9849%" y="244" width="4.7653%" height="15" fill="rgb(235,213,38)" fg:x="239267" fg:w="13576"/><text x="84.2349%" y="254.50">step (..</text></g><g><title>test_wipe (test_symbolic_primitives.py:235) (14,292 samples, 5.02%)</title><rect x="83.7353%" y="212" width="5.0166%" height="15" fill="rgb(237,122,38)" fg:x="238556" fg:w="14292"/><text x="83.9853%" y="222.50">test_w..</text></g><g><title>step (omnigibson/simulator.py:1084) (1,166 samples, 0.41%)</title><rect x="88.8418%" y="244" width="0.4093%" height="15" fill="rgb(244,218,35)" fg:x="253104" fg:w="1166"/><text x="89.0918%" y="254.50"></text></g><g><title>step (core/simulation_context/simulation_context.py:699) (1,166 samples, 0.41%)</title><rect x="88.8418%" y="260" width="0.4093%" height="15" fill="rgb(240,68,47)" fg:x="253104" fg:w="1166"/><text x="89.0918%" y="270.50"></text></g><g><title>aabb (omnigibson/prims/geom_prim.py:153) (10,387 samples, 3.65%)</title><rect x="89.2535%" y="308" width="3.6459%" height="15" fill="rgb(210,16,53)" fg:x="254277" fg:w="10387"/><text x="89.5035%" y="318.50">aabb..</text></g><g><title>points (omnigibson/prims/geom_prim.py:131) (10,387 samples, 3.65%)</title><rect x="89.2535%" y="324" width="3.6459%" height="15" fill="rgb(235,124,12)" fg:x="254277" fg:w="10387"/><text x="89.5035%" y="334.50">poin..</text></g><g><title>_non_physics_step (omnigibson/simulator.py:949) (10,395 samples, 3.65%)</title><rect x="89.2514%" y="260" width="3.6487%" height="15" fill="rgb(224,169,11)" fg:x="254271" fg:w="10395"/><text x="89.5014%" y="270.50">_non..</text></g><g><title>update (omnigibson/systems/macro_particle_system.py:425) (10,395 samples, 3.65%)</title><rect x="89.2514%" y="276" width="3.6487%" height="15" fill="rgb(250,166,2)" fg:x="254271" fg:w="10395"/><text x="89.5014%" y="286.50">upda..</text></g><g><title>aabb_extent (omnigibson/prims/geom_prim.py:169) (10,395 samples, 3.65%)</title><rect x="89.2514%" y="292" width="3.6487%" height="15" fill="rgb(242,216,29)" fg:x="254271" fg:w="10395"/><text x="89.5014%" y="302.50">aabb..</text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:146) (884 samples, 0.31%)</title><rect x="92.9223%" y="372" width="0.3103%" height="15" fill="rgb(230,116,27)" fg:x="264729" fg:w="884"/><text x="93.1723%" y="382.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (884 samples, 0.31%)</title><rect x="92.9223%" y="388" width="0.3103%" height="15" fill="rgb(228,99,48)" fg:x="264729" fg:w="884"/><text x="93.1723%" y="398.50"></text></g><g><title>particle_velocities (omnigibson/systems/micro_particle_system.py:287) (466 samples, 0.16%)</title><rect x="93.2325%" y="388" width="0.1636%" height="15" fill="rgb(253,11,6)" fg:x="265613" fg:w="466"/><text x="93.4825%" y="398.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (466 samples, 0.16%)</title><rect x="93.2325%" y="404" width="0.1636%" height="15" fill="rgb(247,143,39)" fg:x="265613" fg:w="466"/><text x="93.4825%" y="414.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (466 samples, 0.16%)</title><rect x="93.2325%" y="420" width="0.1636%" height="15" fill="rgb(236,97,10)" fg:x="265613" fg:w="466"/><text x="93.4825%" y="430.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:148) (516 samples, 0.18%)</title><rect x="93.2325%" y="372" width="0.1811%" height="15" fill="rgb(233,208,19)" fg:x="265613" fg:w="516"/><text x="93.4825%" y="382.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:149) (930 samples, 0.33%)</title><rect x="93.4137%" y="372" width="0.3264%" height="15" fill="rgb(216,164,2)" fg:x="266129" fg:w="930"/><text x="93.6637%" y="382.50"></text></g><g><title>particle_velocities (omnigibson/systems/micro_particle_system.py:275) (930 samples, 0.33%)</title><rect x="93.4137%" y="388" width="0.3264%" height="15" fill="rgb(220,129,5)" fg:x="266129" fg:w="930"/><text x="93.6637%" y="398.50"></text></g><g><title>particle_orientations (omnigibson/systems/micro_particle_system.py:260) (595 samples, 0.21%)</title><rect x="93.7401%" y="388" width="0.2089%" height="15" fill="rgb(242,17,10)" fg:x="267059" fg:w="595"/><text x="93.9901%" y="398.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (595 samples, 0.21%)</title><rect x="93.7401%" y="404" width="0.2089%" height="15" fill="rgb(242,107,0)" fg:x="267059" fg:w="595"/><text x="93.9901%" y="414.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (595 samples, 0.21%)</title><rect x="93.7401%" y="420" width="0.2089%" height="15" fill="rgb(251,28,31)" fg:x="267059" fg:w="595"/><text x="93.9901%" y="430.50"></text></g><g><title>particle_orientations (omnigibson/systems/micro_particle_system.py:264) (495 samples, 0.17%)</title><rect x="93.9490%" y="388" width="0.1737%" height="15" fill="rgb(233,223,10)" fg:x="267654" fg:w="495"/><text x="94.1990%" y="398.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (495 samples, 0.17%)</title><rect x="93.9490%" y="404" width="0.1737%" height="15" fill="rgb(215,21,27)" fg:x="267654" fg:w="495"/><text x="94.1990%" y="414.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (495 samples, 0.17%)</title><rect x="93.9490%" y="420" width="0.1737%" height="15" fill="rgb(232,23,21)" fg:x="267654" fg:w="495"/><text x="94.1990%" y="430.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:151) (1,093 samples, 0.38%)</title><rect x="93.7401%" y="372" width="0.3837%" height="15" fill="rgb(244,5,23)" fg:x="267059" fg:w="1093"/><text x="93.9901%" y="382.50"></text></g><g><title>particle_scales (omnigibson/systems/micro_particle_system.py:298) (878 samples, 0.31%)</title><rect x="94.1676%" y="388" width="0.3082%" height="15" fill="rgb(226,81,46)" fg:x="268277" fg:w="878"/><text x="94.4176%" y="398.50"></text></g><g><title>particle_scales (omnigibson/systems/micro_particle_system.py:310) (451 samples, 0.16%)</title><rect x="94.4758%" y="388" width="0.1583%" height="15" fill="rgb(247,70,30)" fg:x="269155" fg:w="451"/><text x="94.7258%" y="398.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (451 samples, 0.16%)</title><rect x="94.4758%" y="404" width="0.1583%" height="15" fill="rgb(212,68,19)" fg:x="269155" fg:w="451"/><text x="94.7258%" y="414.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (451 samples, 0.16%)</title><rect x="94.4758%" y="420" width="0.1583%" height="15" fill="rgb(240,187,13)" fg:x="269155" fg:w="451"/><text x="94.7258%" y="430.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:156) (1,411 samples, 0.50%)</title><rect x="94.1673%" y="372" width="0.4953%" height="15" fill="rgb(223,113,26)" fg:x="268276" fg:w="1411"/><text x="94.4173%" y="382.50"></text></g><g><title>particle_prototype_ids (omnigibson/systems/micro_particle_system.py:333) (485 samples, 0.17%)</title><rect x="94.6626%" y="388" width="0.1702%" height="15" fill="rgb(206,192,2)" fg:x="269687" fg:w="485"/><text x="94.9126%" y="398.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (485 samples, 0.17%)</title><rect x="94.6626%" y="404" width="0.1702%" height="15" fill="rgb(241,108,4)" fg:x="269687" fg:w="485"/><text x="94.9126%" y="414.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (485 samples, 0.17%)</title><rect x="94.6626%" y="420" width="0.1702%" height="15" fill="rgb(247,173,49)" fg:x="269687" fg:w="485"/><text x="94.9126%" y="430.50"></text></g><g><title>add_particles (omnigibson/systems/micro_particle_system.py:157) (486 samples, 0.17%)</title><rect x="94.6626%" y="372" width="0.1706%" height="15" fill="rgb(224,114,35)" fg:x="269687" fg:w="486"/><text x="94.9126%" y="382.50"></text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:1201) (5,511 samples, 1.93%)</title><rect x="92.9072%" y="292" width="1.9344%" height="15" fill="rgb(245,159,27)" fg:x="264686" fg:w="5511"/><text x="93.1572%" y="302.50">_..</text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:665) (5,511 samples, 1.93%)</title><rect x="92.9072%" y="308" width="1.9344%" height="15" fill="rgb(245,172,44)" fg:x="264686" fg:w="5511"/><text x="93.1572%" y="318.50">_..</text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:1251) (5,511 samples, 1.93%)</title><rect x="92.9072%" y="324" width="1.9344%" height="15" fill="rgb(236,23,11)" fg:x="264686" fg:w="5511"/><text x="93.1572%" y="334.50">_..</text></g><g><title>_apply_particles_in_projection_volume (omnigibson/object_states/particle_modifier.py:1364) (5,509 samples, 1.93%)</title><rect x="92.9079%" y="340" width="1.9337%" height="15" fill="rgb(205,117,38)" fg:x="264688" fg:w="5509"/><text x="93.1579%" y="350.50">_..</text></g><g><title>generate_particles (omnigibson/systems/micro_particle_system.py:960) (5,509 samples, 1.93%)</title><rect x="92.9079%" y="356" width="1.9337%" height="15" fill="rgb(237,72,25)" fg:x="264688" fg:w="5509"/><text x="93.1579%" y="366.50">g..</text></g><g><title>&lt;lambda&gt; (omnigibson/object_states/particle_modifier.py:917) (3,244 samples, 1.14%)</title><rect x="94.8416%" y="340" width="1.1387%" height="15" fill="rgb(244,70,9)" fg:x="270197" fg:w="3244"/><text x="95.0916%" y="350.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:734) (3,244 samples, 1.14%)</title><rect x="94.8416%" y="356" width="1.1387%" height="15" fill="rgb(217,125,39)" fg:x="270197" fg:w="3244"/><text x="95.0916%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/systems/micro_particle_system.py:734) (3,244 samples, 1.14%)</title><rect x="94.8416%" y="372" width="1.1387%" height="15" fill="rgb(235,36,10)" fg:x="270197" fg:w="3244"/><text x="95.0916%" y="382.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (3,244 samples, 1.14%)</title><rect x="94.8416%" y="388" width="1.1387%" height="15" fill="rgb(251,123,47)" fg:x="270197" fg:w="3244"/><text x="95.0916%" y="398.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (3,243 samples, 1.14%)</title><rect x="94.8419%" y="404" width="1.1383%" height="15" fill="rgb(221,13,13)" fg:x="270198" fg:w="3243"/><text x="95.0919%" y="414.50"></text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:659) (3,245 samples, 1.14%)</title><rect x="94.8416%" y="292" width="1.1390%" height="15" fill="rgb(238,131,9)" fg:x="270197" fg:w="3245"/><text x="95.0916%" y="302.50"></text></g><g><title>check_conditions_for_system (omnigibson/object_states/particle_modifier.py:639) (3,245 samples, 1.14%)</title><rect x="94.8416%" y="308" width="1.1390%" height="15" fill="rgb(211,50,8)" fg:x="270197" fg:w="3245"/><text x="95.0916%" y="318.50"></text></g><g><title>&lt;genexpr&gt; (omnigibson/object_states/particle_modifier.py:639) (3,245 samples, 1.14%)</title><rect x="94.8416%" y="324" width="1.1390%" height="15" fill="rgb(245,182,24)" fg:x="270197" fg:w="3245"/><text x="95.0916%" y="334.50"></text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:877) (3,090 samples, 1.08%)</title><rect x="95.9809%" y="308" width="1.0846%" height="15" fill="rgb(242,14,37)" fg:x="273443" fg:w="3090"/><text x="96.2309%" y="318.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:734) (3,090 samples, 1.08%)</title><rect x="95.9809%" y="324" width="1.0846%" height="15" fill="rgb(246,228,12)" fg:x="273443" fg:w="3090"/><text x="96.2309%" y="334.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/systems/micro_particle_system.py:734) (3,090 samples, 1.08%)</title><rect x="95.9809%" y="340" width="1.0846%" height="15" fill="rgb(213,55,15)" fg:x="273443" fg:w="3090"/><text x="96.2309%" y="350.50"></text></g><g><title>n_particles (omnigibson/systems/micro_particle_system.py:188) (3,090 samples, 1.08%)</title><rect x="95.9809%" y="356" width="1.0846%" height="15" fill="rgb(209,9,3)" fg:x="273443" fg:w="3090"/><text x="96.2309%" y="366.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (3,089 samples, 1.08%)</title><rect x="95.9813%" y="372" width="1.0843%" height="15" fill="rgb(230,59,30)" fg:x="273444" fg:w="3089"/><text x="96.2313%" y="382.50"></text></g><g><title>particle_orientations (omnigibson/systems/micro_particle_system.py:246) (361 samples, 0.13%)</title><rect x="97.0996%" y="340" width="0.1267%" height="15" fill="rgb(209,121,21)" fg:x="276630" fg:w="361"/><text x="97.3496%" y="350.50"></text></g><g><title>&lt;listcomp&gt; (omnigibson/systems/micro_particle_system.py:246) (361 samples, 0.13%)</title><rect x="97.0996%" y="356" width="0.1267%" height="15" fill="rgb(220,109,13)" fg:x="276630" fg:w="361"/><text x="97.3496%" y="366.50"></text></g><g><title>_non_physics_step (omnigibson/simulator.py:963) (15,615 samples, 5.48%)</title><rect x="92.9019%" y="260" width="5.4810%" height="15" fill="rgb(232,18,1)" fg:x="264671" fg:w="15615"/><text x="93.1519%" y="270.50">_non_ph..</text></g><g><title>update (omnigibson/object_states/update_state_mixin.py:15) (15,615 samples, 5.48%)</title><rect x="92.9019%" y="276" width="5.4810%" height="15" fill="rgb(215,41,42)" fg:x="264671" fg:w="15615"/><text x="93.1519%" y="286.50">update ..</text></g><g><title>_update (omnigibson/object_states/particle_modifier.py:665) (6,843 samples, 2.40%)</title><rect x="95.9809%" y="292" width="2.4020%" height="15" fill="rgb(224,123,36)" fg:x="273443" fg:w="6843"/><text x="96.2309%" y="302.50">_u..</text></g><g><title>_modify_particles (omnigibson/object_states/particle_modifier.py:893) (3,737 samples, 1.31%)</title><rect x="97.0712%" y="308" width="1.3117%" height="15" fill="rgb(240,125,3)" fg:x="276549" fg:w="3737"/><text x="97.3212%" y="318.50"></text></g><g><title>get_particles_position_orientation (omnigibson/systems/micro_particle_system.py:1195) (3,718 samples, 1.31%)</title><rect x="97.0779%" y="324" width="1.3051%" height="15" fill="rgb(205,98,50)" fg:x="276568" fg:w="3718"/><text x="97.3279%" y="334.50"></text></g><g><title>particle_positions (omnigibson/systems/micro_particle_system.py:221) (3,295 samples, 1.16%)</title><rect x="97.2263%" y="340" width="1.1566%" height="15" fill="rgb(205,185,37)" fg:x="276991" fg:w="3295"/><text x="97.4763%" y="350.50"></text></g><g><title>step (omnigibson/envs/env_base.py:619) (27,185 samples, 9.54%)</title><rect x="88.8411%" y="228" width="9.5422%" height="15" fill="rgb(238,207,15)" fg:x="253102" fg:w="27185"/><text x="89.0911%" y="238.50">step (omnigibs..</text></g><g><title>step (omnigibson/simulator.py:1090) (26,017 samples, 9.13%)</title><rect x="89.2511%" y="244" width="9.1322%" height="15" fill="rgb(213,199,42)" fg:x="254270" fg:w="26017"/><text x="89.5011%" y="254.50">step (omnigib..</text></g><g><title>main (pdb.py:1723) (52,380 samples, 18.39%)</title><rect x="80.0006%" y="116" width="18.3859%" height="15" fill="rgb(235,201,11)" fg:x="227916" fg:w="52380"/><text x="80.2506%" y="126.50">main (pdb.py:1723)</text></g><g><title>_runscript (pdb.py:1583) (52,380 samples, 18.39%)</title><rect x="80.0006%" y="132" width="18.3859%" height="15" fill="rgb(207,46,11)" fg:x="227916" fg:w="52380"/><text x="80.2506%" y="142.50">_runscript (pdb.py:1583)</text></g><g><title>run (bdb.py:598) (52,380 samples, 18.39%)</title><rect x="80.0006%" y="148" width="18.3859%" height="15" fill="rgb(241,35,35)" fg:x="227916" fg:w="52380"/><text x="80.2506%" y="158.50">run (bdb.py:598)</text></g><g><title>&lt;module&gt; (&lt;string&gt;:1) (52,380 samples, 18.39%)</title><rect x="80.0006%" y="164" width="18.3859%" height="15" fill="rgb(243,32,47)" fg:x="227916" fg:w="52380"/><text x="80.2506%" y="174.50">&lt;module&gt; (&lt;string&gt;:1)</text></g><g><title>&lt;module&gt; (test_symbolic_primitives.py:307) (52,361 samples, 18.38%)</title><rect x="80.0072%" y="180" width="18.3792%" height="15" fill="rgb(247,202,23)" fg:x="227935" fg:w="52361"/><text x="80.2572%" y="190.50">&lt;module&gt; (test_symbolic_primi..</text></g><g><title>main (test_symbolic_primitives.py:301) (52,361 samples, 18.38%)</title><rect x="80.0072%" y="196" width="18.3792%" height="15" fill="rgb(219,102,11)" fg:x="227935" fg:w="52361"/><text x="80.2572%" y="206.50">main (test_symbolic_primitive..</text></g><g><title>test_wipe (test_symbolic_primitives.py:240) (27,199 samples, 9.55%)</title><rect x="88.8393%" y="212" width="9.5471%" height="15" fill="rgb(243,110,44)" fg:x="253097" fg:w="27199"/><text x="89.0893%" y="222.50">test_wipe (tes..</text></g><g><title>all (284,893 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="284893"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:196) (56,977 samples, 20.00%)</title><rect x="80.0006%" y="68" width="19.9994%" height="15" fill="rgb(216,99,12)" fg:x="227916" fg:w="56977"/><text x="80.2506%" y="78.50">_run_module_as_main (runpy.py:1..</text></g><g><title>_run_code (runpy.py:86) (56,977 samples, 20.00%)</title><rect x="80.0006%" y="84" width="19.9994%" height="15" fill="rgb(226,22,26)" fg:x="227916" fg:w="56977"/><text x="80.2506%" y="94.50">_run_code (runpy.py:86)</text></g><g><title>&lt;module&gt; (pdb.py:1750) (56,977 samples, 20.00%)</title><rect x="80.0006%" y="100" width="19.9994%" height="15" fill="rgb(217,163,10)" fg:x="227916" fg:w="56977"/><text x="80.2506%" y="110.50">&lt;module&gt; (pdb.py:1750)</text></g><g><title>main (pdb.py:1742) (4,597 samples, 1.61%)</title><rect x="98.3864%" y="116" width="1.6136%" height="15" fill="rgb(213,25,53)" fg:x="280296" fg:w="4597"/><text x="98.6364%" y="126.50"></text></g><g><title>interaction (pdb.py:348) (4,597 samples, 1.61%)</title><rect x="98.3864%" y="132" width="1.6136%" height="15" fill="rgb(252,105,26)" fg:x="280296" fg:w="4597"/><text x="98.6364%" y="142.50"></text></g><g><title>_cmdloop (pdb.py:313) (4,597 samples, 1.61%)</title><rect x="98.3864%" y="148" width="1.6136%" height="15" fill="rgb(220,39,43)" fg:x="280296" fg:w="4597"/><text x="98.6364%" y="158.50"></text></g><g><title>cmdloop (cmd.py:126) (4,597 samples, 1.61%)</title><rect x="98.3864%" y="164" width="1.6136%" height="15" fill="rgb(229,68,48)" fg:x="280296" fg:w="4597"/><text x="98.6364%" y="174.50"></text></g></svg></svg>
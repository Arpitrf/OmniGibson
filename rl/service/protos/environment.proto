syntax = "proto2";

package environment;

service EnvironmentService {
    rpc Step(StepRequest) returns (StepResponse);
    rpc Reset(ResetRequest) returns (ResetResponse);
    rpc Render(RenderRequest) returns (RenderResponse);
    rpc Close(CloseRequest) returns (CloseResponse);
    rpc GetSpaces(GetSpacesRequest) returns (GetSpacesResponse);
    rpc EnvMethod(EnvMethodRequest) returns (EnvMethodResponse);
    rpc GetAttr(GetAttrRequest) returns (GetAttrResponse);
    rpc SetAttr(SetAttrRequest) returns (SetAttrResponse);
    rpc IsWrapped(IsWrappedRequest) returns (IsWrappedResponse);
}

message StepRequest {
    required bytes action = 1;
}

message StepResponse {
    required bytes observation = 1;
    required float reward = 2;
    required bool terminated = 3;
    required bool truncated = 4;
    required bytes info = 5;
}

message ResetRequest {
    optional int32 seed = 1;
    optional bytes options = 2;
}

message ResetResponse {
    required bytes observation = 1;
    required bytes reset_info = 2;
}

message RenderRequest {
}

message RenderResponse {
    required bytes render_data = 1;
}

message CloseRequest {}
message CloseResponse {}

message GetSpacesRequest {}
message GetSpacesResponse {
    required bytes observation_space = 1;
    required bytes action_space = 2;
}

message EnvMethodRequest {
    required string method_name = 1;
    required bytes arguments = 2;
}

message EnvMethodResponse {
    required bytes result = 1;
}

message GetAttrRequest {
    required string attribute_name = 1;
}

message GetAttrResponse {
    required bytes attribute_value = 1;
}

message SetAttrRequest {
    required string attribute_name = 1;
    required bytes attribute_value = 2;
}

message SetAttrResponse {
}

// IsWrapped Request and response
message IsWrappedRequest {
    required string wrapper_type = 1;
}

message IsWrappedResponse {
    required bool is_wrapped = 1;
}

service EnvironmentRegistrationService {
    rpc RegisterEnvironment(RegisterEnvironmentRequest) returns (RegisterEnvironmentResponse);
}

message RegisterEnvironmentRequest {
    required string ip = 1;
    required int32 port = 2;
}

message RegisterEnvironmentResponse {
    required bool success = 1;
}
